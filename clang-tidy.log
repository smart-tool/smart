source/algos/ag.c:63:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   63 |         if (bmGs[j] == m)
      |                     ^
source/algos/ag.c:75:3: note: Calling 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/ag.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/ag.c:59:3: note: The value 0 is assigned to 'j'
   59 |   j = 0;
      |   ^~~~~
source/algos/ag.c:60:19: note: Assuming 'i' is >= 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/ag.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:61:9: note: Assuming the condition is false
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/ag.c:61:5: note: Taking false branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/ag.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:61:9: note: Assuming the condition is true
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/ag.c:61:5: note: Taking true branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/ag.c:62:7: note: Loop condition is true.  Entering loop body
   62 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/ag.c:63:21: note: The left operand of '==' is a garbage value
   63 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/ag.c:112:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  112 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/ag.c:75:3: note: Calling 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/ag.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/ag.c:60:19: note: Assuming 'i' is < 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/ag.c:60:3: note: Loop condition is false. Execution continues on line 65
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:65:15: note: Assuming the condition is false
   65 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/ag.c:65:3: note: Loop condition is false. Execution continues on line 65
   65 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/ag.c:67:1: note: Returning without writing to '*bmGs'
   67 | }
      | ^
source/algos/ag.c:75:3: note: Returning from 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:79:3: note: Assuming 'pre_time' is null
   79 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/ag.c:79:3: note: Taking false branch
   79 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/ag.c:85:10: note: Assuming the condition is true
   85 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/ag.c:85:3: note: Loop condition is true.  Entering loop body
   85 |   while (j <= n - m) {
      |   ^
source/algos/ag.c:87:12: note: 'i' is < 0
   87 |     while (i >= 0) {
      |            ^
source/algos/ag.c:87:5: note: Loop condition is false. Execution continues on line 109
   87 |     while (i >= 0) {
      |     ^
source/algos/ag.c:109:9: note: 'i' is < 0
  109 |     if (i < 0) {
      |         ^
source/algos/ag.c:109:5: note: Taking true branch
  109 |     if (i < 0) {
      |     ^
source/algos/ag.c:112:13: note: Assigned value is garbage or undefined
  112 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/akc.c:305:14: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  305 |       len[p] = skip[j];
      |              ^
source/algos/akc.c:382:7: note: Assuming 'm' is <= M_CUTOFF
  382 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/akc.c:382:3: note: Taking false branch
  382 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:405:3: note: Assuming 'pre_time' is null
  405 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/akc.c:405:3: note: Taking false branch
  405 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/akc.c:413:10: note: Assuming the condition is true
  413 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/akc.c:413:3: note: Loop condition is true.  Entering loop body
  413 |   while (j <= n - m) {
      |   ^
source/algos/akc.c:417:5: note: Loop condition is true.  Entering loop body
  417 |     while (i >= 0) {
      |     ^
source/algos/akc.c:418:11: note: 'k' is not equal to 0
  418 |       if (k == 0) {
      |           ^
source/algos/akc.c:418:7: note: Taking false branch
  418 |       if (k == 0) {
      |       ^
source/algos/akc.c:426:11: note: Assuming the condition is false
  426 |       if (x[i] == y[i + j]) {
      |           ^~~~~~~~~~~~~~~~
source/algos/akc.c:426:7: note: Taking false branch
  426 |       if (x[i] == y[i + j]) {
      |       ^
source/algos/akc.c:430:9: note:  Execution continues on line 432
  430 |         break;
      |         ^
source/algos/akc.c:432:9: note: 'i' is >= 0
  432 |     if (i < 0) {
      |         ^
source/algos/akc.c:432:5: note: Taking false branch
  432 |     if (i < 0) {
      |     ^
source/algos/akc.c:438:19: note: '?' condition is false
  438 |       skip[ell] = MAX(0, k - 1);
      |                   ^
source/algos/akc.c:29:20: note: expanded from macro 'MAX'
   29 | #define MAX(a, b) ((a) > (b) ? (a) : (b))
      |                    ^
source/algos/akc.c:442:7: note: Taking true branch
  442 |       if (i == m - 1) {
      |       ^
source/algos/akc.c:450:7: note: Calling 'validateShift'
  450 |       validateShift(m, clink, slink, ell, skip);
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/akc.c:281:7: note: 'm' is <= M_CUTOFF
  281 |   if (m > M_CUTOFF) {
      |       ^
source/algos/akc.c:281:3: note: Taking false branch
  281 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:290:7: note: Assuming the condition is true
  290 |   if (skip[ell] < m) {
      |       ^~~~~~~~~~~~~
source/algos/akc.c:290:3: note: Taking true branch
  290 |   if (skip[ell] < m) {
      |   ^
source/algos/akc.c:295:9: note: Assuming the condition is false
  295 |     if (skip[ell] + k >= m)
      |         ^~~~~~~~~~~~~~~~~~
source/algos/akc.c:295:5: note: Taking false branch
  295 |     if (skip[ell] + k >= m)
      |     ^
source/algos/akc.c:299:9: note: Assuming the condition is false
  299 |     if (skip[ell] + k >= m)
      |         ^~~~~~~~~~~~~~~~~~
source/algos/akc.c:299:5: note: Taking false branch
  299 |     if (skip[ell] + k >= m)
      |     ^
source/algos/akc.c:302:5: note: Loop condition is true.  Entering loop body
  302 |     while (skip[ell] + k < m) {
      |     ^
source/algos/akc.c:303:7: note: The value 3 is assigned to 'j'
  303 |       j = (j + z - 1) % z;
      |       ^~~~~~~~~~~~~~~~~~~
source/algos/akc.c:305:14: note: Assigned value is garbage or undefined
  305 |       len[p] = skip[j];
      |              ^ ~~~~~~~
source/algos/akc.c:439:23: warning: The result of the '' expression is undefined [clang-analyzer-core.UndefinedBinaryOperatorResult]
  439 |       ell = (ell + 1) % M;
      |             ~~~~~~~~~~^~~
source/algos/akc.c:382:7: note: Assuming 'm' is <= M_CUTOFF
  382 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/akc.c:382:3: note: Taking false branch
  382 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:405:3: note: Assuming 'pre_time' is null
  405 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/akc.c:405:3: note: Taking false branch
  405 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/akc.c:413:10: note: Assuming the condition is true
  413 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/akc.c:413:3: note: Loop condition is true.  Entering loop body
  413 |   while (j <= n - m) {
      |   ^
source/algos/akc.c:417:12: note: Assuming 'i' is >= 0
  417 |     while (i >= 0) {
      |            ^~~~~~
source/algos/akc.c:417:5: note: Loop condition is true.  Entering loop body
  417 |     while (i >= 0) {
      |     ^
source/algos/akc.c:418:11: note: 'k' is not equal to 0
  418 |       if (k == 0) {
      |           ^
source/algos/akc.c:418:7: note: Taking false branch
  418 |       if (k == 0) {
      |       ^
source/algos/akc.c:426:11: note: Assuming the condition is false
  426 |       if (x[i] == y[i + j]) {
      |           ^~~~~~~~~~~~~~~~
source/algos/akc.c:426:7: note: Taking false branch
  426 |       if (x[i] == y[i + j]) {
      |       ^
source/algos/akc.c:430:9: note:  Execution continues on line 432
  430 |         break;
      |         ^
source/algos/akc.c:432:9: note: 'i' is >= 0
  432 |     if (i < 0) {
      |         ^
source/algos/akc.c:432:5: note: Taking false branch
  432 |     if (i < 0) {
      |     ^
source/algos/akc.c:438:19: note: '?' condition is false
  438 |       skip[ell] = MAX(0, k - 1);
      |                   ^
source/algos/akc.c:29:20: note: expanded from macro 'MAX'
   29 | #define MAX(a, b) ((a) > (b) ? (a) : (b))
      |                    ^
source/algos/akc.c:439:23: note: The result of the '' expression is undefined
  439 |       ell = (ell + 1) % M;
      |             ~~~~~~~~~~^~~
source/algos/askip.c:74:1: warning: Potential memory leak [clang-analyzer-unix.Malloc]
   74 | }
      | ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^
source/algos/askip.c:109:7: note: Assuming 'ell' is < 1
  109 |   if (ell < 1)
      |       ^~~~~~~
source/algos/askip.c:109:3: note: Taking true branch
  109 |   if (ell < 1)
      |   ^
source/algos/askip.c:114:7: note: Assuming 'size' is <= S_CUTOFF
  114 |   if (size > S_CUTOFF) {
      |       ^~~~~~~~~~~~~~~
source/algos/askip.c:114:3: note: Taking false branch
  114 |   if (size > S_CUTOFF) {
      |   ^
source/algos/askip.c:139:3: note: Loop condition is false. Execution continues on line 141
  139 |   for (i = 1; i < ell; ++i)
      |   ^
source/algos/askip.c:142:3: note: Calling 'setZ'
  142 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:70:26: note: Memory is allocated
   70 |   cell = (ListOfIntegers)malloc(sizeof(struct _listOfIntegers));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:142:3: note: Returned allocated memory
  142 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:144:17: note: Assuming the condition is false
  144 |   for (i = ell; i < m - 1; ++i) {
      |                 ^~~~~~~~~
source/algos/askip.c:144:3: note: Loop condition is false. Execution continues on line 154
  144 |   for (i = ell; i < m - 1; ++i) {
      |   ^
source/algos/askip.c:156:7: note: Assuming 'childNode' is not equal to NIL
  156 |   if (childNode == NIL)
      |       ^~~~~~~~~~~~~~~~
source/algos/askip.c:156:3: note: Taking false branch
  156 |   if (childNode == NIL)
      |   ^
source/algos/askip.c:160:3: note: Calling 'setZ'
  160 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:74:1: note: Potential memory leak
   74 | }
      | ^
source/algos/askip.c:124:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  124 |     memset(s_trans, 0, size * SIGMA * sizeof(int));
      |     ^~~~~~
source/algos/askip.c:124:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  124 |     memset(s_trans, 0, size * SIGMA * sizeof(int));
      |     ^~~~~~
source/algos/askip.c:125:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  125 |     memset(s_term, 0, size);
      |     ^~~~~~
source/algos/askip.c:125:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  125 |     memset(s_term, 0, size);
      |     ^~~~~~
source/algos/askip.c:126:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  126 |     memset(s_fail, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/askip.c:126:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  126 |     memset(s_fail, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/askip.c:127:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  127 |     memset(s_z, 0, size * sizeof(ListOfIntegers));
      |     ^~~~~~
source/algos/askip.c:127:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  127 |     memset(s_z, 0, size * sizeof(ListOfIntegers));
      |     ^~~~~~
source/algos/askip.c:191:13: warning: Potential memory leak [clang-analyzer-unix.Malloc]
  191 |             END_SEARCHING
      |             ^
source/algos/include/main.h:59:5: note: expanded from macro 'END_SEARCHING'
   59 |     timer_stop(_timer);                                                        \
      |     ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^
source/algos/askip.c:109:7: note: Assuming 'ell' is >= 1
  109 |   if (ell < 1)
      |       ^~~~~~~
source/algos/askip.c:109:3: note: Taking false branch
  109 |   if (ell < 1)
      |   ^
source/algos/askip.c:111:12: note: Assuming the condition is false
  111 |   else if (ell > m / 2)
      |            ^~~~~~~~~~~
source/algos/askip.c:111:8: note: Taking false branch
  111 |   else if (ell > m / 2)
      |        ^
source/algos/askip.c:114:7: note: Assuming 'size' is <= S_CUTOFF
  114 |   if (size > S_CUTOFF) {
      |       ^~~~~~~~~~~~~~~
source/algos/askip.c:114:3: note: Taking false branch
  114 |   if (size > S_CUTOFF) {
      |   ^
source/algos/askip.c:139:15: note: Assuming 'i' is >= 'ell'
  139 |   for (i = 1; i < ell; ++i)
      |               ^~~~~~~
source/algos/askip.c:139:3: note: Loop condition is false. Execution continues on line 141
  139 |   for (i = 1; i < ell; ++i)
      |   ^
source/algos/askip.c:144:17: note: Assuming the condition is false
  144 |   for (i = ell; i < m - 1; ++i) {
      |                 ^~~~~~~~~
source/algos/askip.c:144:3: note: Loop condition is false. Execution continues on line 154
  144 |   for (i = ell; i < m - 1; ++i) {
      |   ^
source/algos/askip.c:156:7: note: Assuming 'childNode' is not equal to NIL
  156 |   if (childNode == NIL)
      |       ^~~~~~~~~~~~~~~~
source/algos/askip.c:156:3: note: Taking false branch
  156 |   if (childNode == NIL)
      |   ^
source/algos/askip.c:160:3: note: Calling 'setZ'
  160 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:70:26: note: Memory is allocated
   70 |   cell = (ListOfIntegers)malloc(sizeof(struct _listOfIntegers));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:160:3: note: Returned allocated memory
  160 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:161:3: note: Assuming 'pre_time' is null
  161 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/askip.c:161:3: note: Taking false branch
  161 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/askip.c:170:3: note: Loop condition is true.  Entering loop body
  170 |   while (1) {
      |   ^
source/algos/askip.c:171:5: note: Loop condition is false. Execution continues on line 173
  171 |     while (delta(root, y[j]) == NIL)
      |     ^
source/algos/askip.c:174:5: note: Loop condition is false. Execution continues on line 176
  174 |     for (q = 1; q < ell; ++q)
      |     ^
source/algos/askip.c:176:9: note: Assuming 'node' is not equal to NIL
  176 |     if (node != NIL)
      |         ^~~~~~~~~~~
source/algos/askip.c:176:5: note: Taking true branch
  176 |     if (node != NIL)
      |     ^
source/algos/askip.c:177:31: note: Assuming 'cell' is not equal to NULL
  177 |       for (cell = getZ(node); cell != NULL; cell = cell->next) {
      |                               ^~~~~~~~~~~~
source/algos/askip.c:177:7: note: Loop condition is true.  Entering loop body
  177 |       for (cell = getZ(node); cell != NULL; cell = cell->next) {
      |       ^
source/algos/askip.c:178:13: note: Assuming the condition is true
  178 |         if (memcmp(x, y + j - cell->position, m) == 0) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:178:9: note: Taking true branch
  178 |         if (memcmp(x, y + j - cell->position, m) == 0) {
      |         ^
source/algos/askip.c:179:15: note: Assuming the condition is false
  179 |           if (j - cell->position <= n - m) {
      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:179:11: note: Taking false branch
  179 |           if (j - cell->position <= n - m) {
      |           ^
source/algos/askip.c:182:13: note: Loop condition is true.  Entering loop body
  182 |             for (i = automaton->root; i < automaton->nodeCounter; ++i)
      |             ^
source/algos/askip.c:182:13: note: Loop condition is true.  Entering loop body
source/algos/askip.c:182:13: note: Loop condition is false. Execution continues on line 184
source/algos/askip.c:184:17: note: 'size' is <= S_CUTOFF
  184 |             if (size > S_CUTOFF) {
      |                 ^~~~
source/algos/askip.c:184:13: note: Taking false branch
  184 |             if (size > S_CUTOFF) {
      |             ^
source/algos/askip.c:191:13: note: Potential memory leak
  191 |             END_SEARCHING
      |             ^
source/algos/include/main.h:59:5: note: expanded from macro 'END_SEARCHING'
   59 |     timer_stop(_timer);                                                        \
      |     ^
source/algos/bm.c:63:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   63 |         if (bmGs[j] == m)
      |                     ^
source/algos/bm.c:74:3: note: Calling 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/bm.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/bm.c:59:3: note: The value 0 is assigned to 'j'
   59 |   j = 0;
      |   ^~~~~
source/algos/bm.c:60:19: note: Assuming 'i' is >= 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/bm.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:61:9: note: Assuming the condition is false
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/bm.c:61:5: note: Taking false branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/bm.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:61:9: note: Assuming the condition is true
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/bm.c:61:5: note: Taking true branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/bm.c:62:7: note: Loop condition is true.  Entering loop body
   62 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/bm.c:63:21: note: The left operand of '==' is a garbage value
   63 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/bm.c:87:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   87 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/bm.c:74:3: note: Calling 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/bm.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/bm.c:60:19: note: Assuming 'i' is < 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/bm.c:60:3: note: Loop condition is false. Execution continues on line 65
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:65:15: note: Assuming the condition is false
   65 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/bm.c:65:3: note: Loop condition is false. Execution continues on line 65
   65 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/bm.c:67:1: note: Returning without writing to '*bmGs'
   67 | }
      | ^
source/algos/bm.c:74:3: note: Returning from 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:76:3: note: Assuming 'pre_time' is null
   76 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/bm.c:76:3: note: Taking false branch
   76 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/bm.c:82:10: note: Assuming the condition is true
   82 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/bm.c:82:3: note: Loop condition is true.  Entering loop body
   82 |   while (j <= n - m) {
      |   ^
source/algos/bm.c:83:21: note: 'i' is < 0
   83 |     for (i = m - 1; i >= 0 && x[i] == y[i + j]; --i)
      |                     ^
source/algos/bm.c:83:28: note: Left side of '&&' is false
   83 |     for (i = m - 1; i >= 0 && x[i] == y[i + j]; --i)
      |                            ^
source/algos/bm.c:85:9: note: 'i' is < 0
   85 |     if (i < 0) {
      |         ^
source/algos/bm.c:85:5: note: Taking true branch
   85 |     if (i < 0) {
      |     ^
source/algos/bm.c:87:9: note: Assigned value is garbage or undefined
   87 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/bom2.c:58:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/bom2.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/bom2.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/bom2.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/bom2.c:46:5: note: Loop condition is false. Execution continues on line 51
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/bom2.c:51:3: note: Loop condition is false. Execution continues on line 54
   51 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/bom2.c:55:8: note: Value assigned to 'i'
   55 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/bom2.c:55:15: note: Assuming 'i' is > 0
   55 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/bom2.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/bom2.c:58:17: note: Array access results in an undefined pointer dereference
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/bom2.c:77:31: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   77 |     while (i + j >= 0 && (q = trans[p][y[i + j]]) != UNDEFINED) {
      |                               ^~~~~~~~~~~~~~~~~~
source/algos/bom2.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/bom2.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/bom2.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/bom2.c:46:5: note: Loop condition is false. Execution continues on line 51
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/bom2.c:51:3: note: Loop condition is false. Execution continues on line 54
   51 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/bom2.c:55:15: note: Assuming 'i' is <= 0
   55 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/bom2.c:55:3: note: Loop condition is false. Execution continues on line 66
   55 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/bom2.c:66:3: note: Assuming 'pre_time' is null
   66 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/bom2.c:66:3: note: Taking false branch
   66 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/bom2.c:73:10: note: Assuming 'j' is <= 'nMinusm'
   73 |   while (j <= nMinusm) {
      |          ^~~~~~~~~~~~
source/algos/bom2.c:73:3: note: Loop condition is true.  Entering loop body
   73 |   while (j <= nMinusm) {
      |   ^
source/algos/bom2.c:75:5: note: Value assigned to 'p'
   75 |     p = m;
      |     ^~~~~
source/algos/bom2.c:77:12: note: Assuming the condition is true
   77 |     while (i + j >= 0 && (q = trans[p][y[i + j]]) != UNDEFINED) {
      |            ^~~~~~~~~~
source/algos/bom2.c:77:12: note: Left side of '&&' is true
source/algos/bom2.c:77:31: note: Array access results in an undefined pointer dereference
   77 |     while (i + j >= 0 && (q = trans[p][y[i + j]]) != UNDEFINED) {
      |                               ^~~~~~~~~~~~~~~~~~
source/algos/colussi.c:59:21: warning: The left operand of '==' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
   59 |     if (hmax[i + 1] == m)
      |                     ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking true branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is < 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:19: note: Assuming 'i' is >= 0
   58 |   for (i = m - 1; i >= 0; --i) {
      |                   ^~~~~~
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:21: note: The left operand of '==' is a garbage value due to array index out of bounds
   59 |     if (hmax[i + 1] == m)
      |         ~~~~~~~~~~~ ^
source/algos/colussi.c:96:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is true
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is true.  Entering loop body
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking false branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:5: note: Taking false branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/colussi.c:61:9: note: Assuming the condition is true
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/colussi.c:61:5: note: Taking true branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:71:5: note: Taking true branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is false. Execution continues on line 80
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:80:3: note: Loop condition is true.  Entering loop body
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:80:3: note: Loop condition is false. Execution continues on line 82
source/algos/colussi.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/colussi.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is false. Execution continues on line 95
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:95:3: note: Loop condition is true.  Entering loop body
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:96:13: note: Assigned value is garbage or undefined
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^ ~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:97:11: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking true branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:5: note: Taking true branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/colussi.c:61:9: note: Assuming the condition is false
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/colussi.c:61:5: note: Taking false branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:71:5: note: Taking false branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is true.  Entering loop body
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is false. Execution continues on line 80
source/algos/colussi.c:80:3: note: Loop condition is false. Execution continues on line 82
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:88:9: note: Assuming the condition is false
   88 |     if (kmin[i] > 0)
      |         ^~~~~~~~~~~
source/algos/colussi.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/colussi.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is true.  Entering loop body
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is false. Execution continues on line 95
source/algos/colussi.c:95:3: note: Loop condition is false. Execution continues on line 97
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:97:11: note: Assigned value is garbage or undefined
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/dfdm.c:50:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   50 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/dfdm.c:50:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   50 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/dfdm.c:51:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   51 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/dfdm.c:51:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   51 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/dfdm.c:52:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   52 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/dfdm.c:52:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   52 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ebom.c:61:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   61 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/ebom.c:40:7: note: Assuming 'm' is >= 2
   40 |   if (m < 2)
      |       ^~~~~
source/algos/ebom.c:40:3: note: Taking false branch
   40 |   if (m < 2)
      |   ^
source/algos/ebom.c:46:7: note: Assuming the condition is false
   46 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/ebom.c:46:3: note: Taking false branch
   46 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/ebom.c:51:17: note: Assuming the condition is false
   51 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/ebom.c:51:5: note: Loop condition is false. Execution continues on line 54
   51 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/ebom.c:54:3: note: Loop condition is false. Execution continues on line 57
   54 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/ebom.c:58:8: note: The value 2147483647 is assigned to 'i'
   58 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/ebom.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/ebom.c:61:17: note: Array access results in an undefined pointer dereference
   61 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/epsm.c:257:39: warning: Potential memory leak [clang-analyzer-unix.Malloc]
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |                                       ^
source/algos/epsm.c:357:7: note: Assuming 'patlen' is >= 2
  357 |   if (patlen < 2)
      |       ^~~~~~~~~~
source/algos/epsm.c:357:3: note: Taking false branch
  357 |   if (patlen < 2)
      |   ^
source/algos/epsm.c:359:7: note: Assuming 'patlen' is not equal to 2
  359 |   if (patlen == 2)
      |       ^~~~~~~~~~~
source/algos/epsm.c:359:3: note: Taking false branch
  359 |   if (patlen == 2)
      |   ^
source/algos/epsm.c:361:7: note: Assuming 'patlen' is not equal to 3
  361 |   if (patlen == 3)
      |       ^~~~~~~~~~~
source/algos/epsm.c:361:3: note: Taking false branch
  361 |   if (patlen == 3)
      |   ^
source/algos/epsm.c:363:7: note: Assuming 'patlen' is not equal to 4
  363 |   if (patlen == 4)
      |       ^~~~~~~~~~~
source/algos/epsm.c:363:3: note: Taking false branch
  363 |   if (patlen == 4)
      |   ^
source/algos/epsm.c:365:7: note: Assuming 'patlen' is >= 16
  365 |   if (patlen >= 16)
      |       ^~~~~~~~~~~~
source/algos/epsm.c:365:3: note: Taking true branch
  365 |   if (patlen >= 16)
      |   ^
source/algos/epsm.c:366:12: note: Calling 'search16'
  366 |     return search16(pattern, patlen, x, textlen);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:257:15: note: Assuming the condition is true
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |               ^~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:257:3: note: Loop condition is true.  Entering loop body
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |   ^
source/algos/epsm.c:263:9: note: Assuming the condition is true
  263 |     if (flist[filter] == 0) {
      |         ^~~~~~~~~~~~~~~~~~
source/algos/epsm.c:263:5: note: Taking true branch
  263 |     if (flist[filter] == 0) {
      |     ^
source/algos/epsm.c:264:31: note: Memory is allocated
  264 |       flist[filter] = (LIST *)malloc(sizeof(LIST));
      |                               ^~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:265:11: note: Assuming the condition is true
  265 |       if (flist[filter]) {
      |           ^~~~~~~~~~~~~
source/algos/epsm.c:265:7: note: Taking true branch
  265 |       if (flist[filter]) {
      |       ^
source/algos/epsm.c:257:15: note: Assuming the condition is true
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |               ^~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:257:3: note: Loop condition is true.  Entering loop body
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |   ^
source/algos/epsm.c:263:9: note: Assuming the condition is true
  263 |     if (flist[filter] == 0) {
      |         ^~~~~~~~~~~~~~~~~~
source/algos/epsm.c:263:5: note: Taking true branch
  263 |     if (flist[filter] == 0) {
      |     ^
source/algos/epsm.c:265:11: note: Assuming the condition is false
  265 |       if (flist[filter]) {
      |           ^~~~~~~~~~~~~
source/algos/epsm.c:265:7: note: Taking false branch
  265 |       if (flist[filter]) {
      |       ^
source/algos/epsm.c:257:39: note: Potential memory leak
  257 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |                                       ^
source/algos/fbom.c:56:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   56 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/fbom.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/fbom.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/fbom.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/fbom.c:46:5: note: Loop condition is false. Execution continues on line 49
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/fbom.c:49:3: note: Loop condition is false. Execution continues on line 52
   49 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/fbom.c:53:8: note: Value assigned to 'i'
   53 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/fbom.c:53:15: note: Assuming 'i' is > 0
   53 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/fbom.c:53:3: note: Loop condition is true.  Entering loop body
   53 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/fbom.c:56:17: note: Array access results in an undefined pointer dereference
   56 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/fdm.c:49:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   49 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/fdm.c:49:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   49 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/fdm.c:50:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   50 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/fdm.c:50:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   50 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/fdm.c:51:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   51 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/fdm.c:51:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   51 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ffs.c:41:7: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   41 |     i = temx[last];
      |       ^
source/algos/ffs.c:66:3: note: Calling 'Forward_Suffix_Function'
   66 |   Forward_Suffix_Function(x, m, gs, SIGMA);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ffs.c:34:15: note: Assuming 'i' is >= 'm'
   34 |   for (i = 0; i < m; i++)
      |               ^~~~~
source/algos/ffs.c:34:3: note: Loop condition is false. Execution continues on line 37
   34 |   for (i = 0; i < m; i++)
      |   ^
source/algos/ffs.c:37:15: note: 'i' is >= 'm'
   37 |   for (i = 0; i < m; i++)
      |               ^
source/algos/ffs.c:37:3: note: Loop condition is false. Execution continues on line 39
   37 |   for (i = 0; i < m; i++)
      |   ^
source/algos/ffs.c:39:24: note: Assuming 'suffix_len' is <= 'm'
   39 |   for (suffix_len = 0; suffix_len <= m; suffix_len++) {
      |                        ^~~~~~~~~~~~~~~
source/algos/ffs.c:39:3: note: Loop condition is true.  Entering loop body
   39 |   for (suffix_len = 0; suffix_len <= m; suffix_len++) {
      |   ^
source/algos/ffs.c:40:5: note: The value -1 is assigned to 'last'
   40 |     last = m - 1;
      |     ^~~~~~~~~~~~
source/algos/ffs.c:41:7: note: Assigned value is garbage or undefined
   41 |     i = temx[last];
      |       ^ ~~~~~~~~~~
source/algos/fs-w6.c:109:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
  109 |   s3 = q;
      |   ^    ~
source/algos/fs-w6.c:109:3: note: Value stored to 's3' is never read
  109 |   s3 = q;
      |   ^    ~
source/algos/fs-w6.c:111:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
  111 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w6.c:111:3: note: Value stored to 's5' is never read
  111 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:107:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
  107 |   s3 = q;
      |   ^    ~
source/algos/fs-w8.c:107:3: note: Value stored to 's3' is never read
  107 |   s3 = q;
      |   ^    ~
source/algos/fs-w8.c:109:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
  109 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:109:3: note: Value stored to 's5' is never read
  109 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:111:3: warning: Value stored to 's7' is never read [clang-analyzer-deadcode.DeadStores]
  111 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:111:3: note: Value stored to 's7' is never read
  111 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:89:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
   89 |   s3 = q;
      |   ^    ~
source/algos/fsbndm-w8.c:89:3: note: Value stored to 's3' is never read
   89 |   s3 = q;
      |   ^    ~
source/algos/fsbndm-w8.c:91:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
   91 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:91:3: note: Value stored to 's5' is never read
   91 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:93:3: warning: Value stored to 's7' is never read [clang-analyzer-deadcode.DeadStores]
   93 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:93:3: note: Value stored to 's7' is never read
   93 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/gg.c:59:21: warning: The left operand of '==' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
   59 |     if (hmax[i + 1] == m)
      |                     ^
source/algos/gg.c:108:17: note: Assuming the condition is false
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:108:3: note: Loop condition is false. Execution continues on line 110
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:110:7: note: Assuming the condition is false
  110 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:110:3: note: Taking false branch
  110 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:126:8: note: Calling 'preColussi'
  126 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/gg.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/gg.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/gg.c:44:5: note: Taking true branch
   44 |     if (k == i + 1)
      |     ^
source/algos/gg.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/gg.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/gg.c:51:15: note: 'i' is < 1
   51 |   for (i = m; i >= 1; --i)
      |               ^
source/algos/gg.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/gg.c:58:19: note: Assuming 'i' is >= 0
   58 |   for (i = m - 1; i >= 0; --i) {
      |                   ^~~~~~
source/algos/gg.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/gg.c:59:21: note: The left operand of '==' is a garbage value due to array index out of bounds
   59 |     if (hmax[i + 1] == m)
      |         ~~~~~~~~~~~ ^
source/algos/gg.c:96:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^
source/algos/gg.c:108:17: note: Assuming the condition is true
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:108:3: note: Loop condition is true.  Entering loop body
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:108:17: note: Assuming the condition is false
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:108:3: note: Loop condition is false. Execution continues on line 110
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:110:7: note: Assuming the condition is false
  110 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:110:3: note: Taking false branch
  110 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:126:8: note: Calling 'preColussi'
  126 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:35:12: note: Assuming the condition is true
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/gg.c:35:5: note: Loop condition is true.  Entering loop body
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/gg.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/gg.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/gg.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/gg.c:44:5: note: Taking false branch
   44 |     if (k == i + 1)
      |     ^
source/algos/gg.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/gg.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/gg.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/gg.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/gg.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/gg.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/gg.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/gg.c:59:5: note: Taking false branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/gg.c:61:9: note: Assuming the condition is true
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/gg.c:61:5: note: Taking true branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/gg.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/gg.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/gg.c:71:5: note: Taking true branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/gg.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/gg.c:78:3: note: Loop condition is false. Execution continues on line 80
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/gg.c:80:3: note: Loop condition is true.  Entering loop body
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/gg.c:80:3: note: Loop condition is false. Execution continues on line 82
source/algos/gg.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/gg.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/gg.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/gg.c:93:3: note: Loop condition is false. Execution continues on line 95
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/gg.c:95:3: note: Loop condition is true.  Entering loop body
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/gg.c:96:13: note: Assigned value is garbage or undefined
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^ ~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:97:11: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^
source/algos/gg.c:108:17: note: Assuming the condition is true
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:108:3: note: Loop condition is true.  Entering loop body
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:108:17: note: Assuming the condition is false
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:108:3: note: Loop condition is false. Execution continues on line 110
  108 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:110:7: note: Assuming the condition is false
  110 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:110:3: note: Taking false branch
  110 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:126:8: note: Calling 'preColussi'
  126 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:35:12: note: Assuming the condition is true
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/gg.c:35:5: note: Loop condition is true.  Entering loop body
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/gg.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/gg.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/gg.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/gg.c:44:5: note: Taking false branch
   44 |     if (k == i + 1)
      |     ^
source/algos/gg.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/gg.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/gg.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/gg.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/gg.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/gg.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/gg.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/gg.c:59:5: note: Taking false branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/gg.c:61:9: note: Assuming the condition is false
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/gg.c:61:5: note: Taking false branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/gg.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/gg.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/gg.c:71:5: note: Taking false branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/gg.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/gg.c:78:3: note: Loop condition is true.  Entering loop body
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/gg.c:78:3: note: Loop condition is false. Execution continues on line 80
source/algos/gg.c:80:3: note: Loop condition is false. Execution continues on line 82
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/gg.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/gg.c:88:9: note: Assuming the condition is false
   88 |     if (kmin[i] > 0)
      |         ^~~~~~~~~~~
source/algos/gg.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/gg.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/gg.c:93:3: note: Loop condition is true.  Entering loop body
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/gg.c:93:3: note: Loop condition is false. Execution continues on line 95
source/algos/gg.c:95:3: note: Loop condition is false. Execution continues on line 97
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/gg.c:97:11: note: Assigned value is garbage or undefined
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:147:7: warning: Value stored to 'heavy' is never read [clang-analyzer-deadcode.DeadStores]
  147 |       heavy = 0;
      |       ^       ~
source/algos/gg.c:147:7: note: Value stored to 'heavy' is never read
  147 |       heavy = 0;
      |       ^       ~
source/algos/ildm1.c:45:27: warning: Result of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [clang-analyzer-unix.MallocSizeof]
   45 |     xR = (unsigned char *)malloc(sizeof(char) * (m + 1));
      |           ~~~~~~~~~~~~~~~ ^~~~~~ ~~~~~~~~~~~~
source/algos/ildm1.c:45:27: note: Result of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char'
   45 |     xR = (unsigned char *)malloc(sizeof(char) * (m + 1));
      |           ~~~~~~~~~~~~~~~ ^~~~~~ ~~~~~~~~~~~~
source/algos/ildm1.c:58:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   58 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm1.c:58:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   58 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm1.c:59:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   59 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm1.c:59:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   59 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm1.c:60:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   60 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ildm1.c:60:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   60 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ildm2.c:69:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   69 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm2.c:69:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   69 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm2.c:70:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   70 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm2.c:70:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   70 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ildm2.c:71:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   71 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ildm2.c:71:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   71 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/kmp.c:63:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   63 |       i = kmpNext[i];
      |         ^ ~~~~~~~~~~
source/algos/kmp.c:49:3: note: Calling 'preKmp'
   49 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmp.c:32:10: note: Assuming 'i' is >= 'm'
   32 |   while (i < m) {
      |          ^~~~~
source/algos/kmp.c:32:3: note: Loop condition is false. Execution continues on line 32
   32 |   while (i < m) {
      |   ^
source/algos/kmp.c:49:3: note: Returning from 'preKmp'
   49 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmp.c:50:3: note: Assuming 'pre_time' is null
   50 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/kmp.c:50:3: note: Taking false branch
   50 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/kmp.c:56:10: note: Assuming 'j' is < 'n'
   56 |   while (j < n) {
      |          ^~~~~
source/algos/kmp.c:56:3: note: Loop condition is true.  Entering loop body
   56 |   while (j < n) {
      |   ^
source/algos/kmp.c:57:12: note: Left side of '&&' is true
   57 |     while (i > -1 && x[i] != y[j])
      |            ^
source/algos/kmp.c:57:22: note: Assuming the condition is false
   57 |     while (i > -1 && x[i] != y[j])
      |                      ^~~~~~~~~~~~
source/algos/kmp.c:57:5: note: Loop condition is false. Execution continues on line 59
   57 |     while (i > -1 && x[i] != y[j])
      |     ^
source/algos/kmp.c:59:5: note: The value 1 is assigned to 'i'
   59 |     i++;
      |     ^~~
source/algos/kmp.c:61:9: note: 'i' is >= 'm'
   61 |     if (i >= m) {
      |         ^
source/algos/kmp.c:61:5: note: Taking true branch
   61 |     if (i >= m) {
      |     ^
source/algos/kmp.c:63:9: note: Assigned value is garbage or undefined
   63 |       i = kmpNext[i];
      |         ^ ~~~~~~~~~~
source/algos/kmpskip.c:90:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
   90 |   i = j = -1;
      |   ^   ~~~~~~
source/algos/kmpskip.c:90:3: note: Value stored to 'i' is never read
   90 |   i = j = -1;
      |   ^   ~~~~~~
source/algos/kmpskip.c:138:24: warning: The right operand of '-' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
  138 |         kmpStart += (k - mpNext[k]);
      |                        ^ ~~~~~~~~~
source/algos/kmpskip.c:72:3: note: Calling 'preMp'
   72 |   preMp((char *)x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:51:10: note: Assuming 'i' is >= 'm'
   51 |   while (i < m) {
      |          ^~~~~
source/algos/kmpskip.c:51:3: note: Loop condition is false. Execution continues on line 51
   51 |   while (i < m) {
      |   ^
source/algos/kmpskip.c:72:3: note: Returning from 'preMp'
   72 |   preMp((char *)x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:73:3: note: Calling 'preKmp'
   73 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:33:7: note: Assigning -1
   33 |   j = kmpNext[0] = -1;
      |       ^~~~~~~~~~~~~~~
source/algos/kmpskip.c:34:10: note: 'i' is >= 'm'
   34 |   while (i < m) {
      |          ^
source/algos/kmpskip.c:34:3: note: Loop condition is false. Execution continues on line 34
   34 |   while (i < m) {
      |   ^
source/algos/kmpskip.c:73:3: note: Returning from 'preKmp'
   73 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:79:15: note: 'i' is >= 'm'
   79 |   for (i = 1; i < m; ++i) {
      |               ^
source/algos/kmpskip.c:79:3: note: Loop condition is false. Execution continues on line 83
   79 |   for (i = 1; i < m; ++i) {
      |   ^
source/algos/kmpskip.c:83:3: note: Assuming 'pre_time' is null
   83 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/kmpskip.c:83:3: note: Taking false branch
   83 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/kmpskip.c:93:12: note: Assuming 'j' is < 'n'
   93 |   } while (j < n && z[y[j]] < 0);
      |            ^~~~~
source/algos/kmpskip.c:93:12: note: Left side of '&&' is true
source/algos/kmpskip.c:91:3: note: Loop condition is false.  Exiting loop
   91 |   do {
      |   ^
source/algos/kmpskip.c:94:7: note: Assuming 'j' is < 'n'
   94 |   if (j >= n) {
      |       ^~~~~~
source/algos/kmpskip.c:94:3: note: Taking false branch
   94 |   if (j >= n) {
      |   ^
source/algos/kmpskip.c:100:10: note: Assuming the condition is true
  100 |   while (start <= n - m) {
      |          ^~~~~~~~~~~~~~
source/algos/kmpskip.c:100:3: note: Loop condition is true.  Entering loop body
  100 |   while (start <= n - m) {
      |   ^
source/algos/kmpskip.c:101:9: note: Assuming 'start' is > 'wall'
  101 |     if (start > wall)
      |         ^~~~~~~~~~~~
source/algos/kmpskip.c:101:5: note: Taking true branch
  101 |     if (start > wall)
      |     ^
source/algos/kmpskip.c:103:9: note: Calling 'attempt'
  103 |     k = attempt((char *)y, (char *)x, m, start, wall);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:60:3: note: The value 0 is assigned to 'k'
   60 |   k = wall - start;
      |   ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:61:10: note: 'k' is >= 'm'
   61 |   while (k < m && x[k] == y[k + start])
      |          ^
source/algos/kmpskip.c:61:16: note: Left side of '&&' is false
   61 |   while (k < m && x[k] == y[k + start])
      |                ^
source/algos/kmpskip.c:63:3: note: Returning zero (loaded from 'k')
   63 |   return (k);
      |   ^~~~~~~~~~
source/algos/kmpskip.c:103:9: note: Returning from 'attempt'
  103 |     k = attempt((char *)y, (char *)x, m, start, wall);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:103:5: note: The value 0 is assigned to 'k'
  103 |     k = attempt((char *)y, (char *)x, m, start, wall);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:105:9: note: Assuming 'k' is not equal to 'm'
  105 |     if (k == m) {
      |         ^~~~~~
source/algos/kmpskip.c:105:5: note: Taking false branch
  105 |     if (k == m) {
      |     ^
source/algos/kmpskip.c:110:9: note: Assuming 'i' is >= 0
  110 |     if (i < 0) {
      |         ^~~~~
source/algos/kmpskip.c:110:5: note: Taking false branch
  110 |     if (i < 0) {
      |     ^
source/algos/kmpskip.c:121:5: note: The value -1 is assigned to 'k'
  121 |     k = kmpNext[k];
      |     ^~~~~~~~~~~~~~
source/algos/kmpskip.c:123:12: note: Assuming 'start' is >= 'kmpStart'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |            ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:123:12: note: Left side of '||' is false
source/algos/kmpskip.c:123:33: note: Assuming 'kmpStart' is < 'start'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |                                 ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:123:33: note: Left side of '&&' is true
source/algos/kmpskip.c:123:53: note: Assuming 'start' is < 'wall'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |                                                     ^~~~~~~~~~~~
source/algos/kmpskip.c:123:5: note: Loop condition is true.  Entering loop body
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |     ^
source/algos/kmpskip.c:124:11: note: 'start' is >= 'kmpStart'
  124 |       if (start < kmpStart) {
      |           ^~~~~
source/algos/kmpskip.c:124:7: note: Taking false branch
  124 |       if (start < kmpStart) {
      |       ^
source/algos/kmpskip.c:138:24: note: The right operand of '-' is a garbage value due to array index out of bounds
  138 |         kmpStart += (k - mpNext[k]);
      |                        ^ ~~~~~~~~~
source/algos/ldm.c:66:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   66 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ldm.c:66:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   66 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ldm.c:67:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   67 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ldm.c:67:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   67 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ldm.c:68:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   68 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ldm.c:68:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   68 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/mp.c:56:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   56 |       i = mpNext[i];
      |         ^ ~~~~~~~~~
source/algos/mp.c:42:3: note: Calling 'preMp'
   42 |   preMp(x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/mp.c:30:10: note: Assuming 'i' is >= 'm'
   30 |   while (i < m) {
      |          ^~~~~
source/algos/mp.c:30:3: note: Loop condition is false. Execution continues on line 30
   30 |   while (i < m) {
      |   ^
source/algos/mp.c:42:3: note: Returning from 'preMp'
   42 |   preMp(x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/mp.c:43:3: note: Assuming 'pre_time' is null
   43 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/mp.c:43:3: note: Taking false branch
   43 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/mp.c:49:10: note: Assuming 'j' is < 'n'
   49 |   while (j < n) {
      |          ^~~~~
source/algos/mp.c:49:3: note: Loop condition is true.  Entering loop body
   49 |   while (j < n) {
      |   ^
source/algos/mp.c:50:12: note: Left side of '&&' is true
   50 |     while (i > -1 && x[i] != y[j])
      |            ^
source/algos/mp.c:50:22: note: Assuming the condition is false
   50 |     while (i > -1 && x[i] != y[j])
      |                      ^~~~~~~~~~~~
source/algos/mp.c:50:5: note: Loop condition is false. Execution continues on line 52
   50 |     while (i > -1 && x[i] != y[j])
      |     ^
source/algos/mp.c:52:5: note: The value 1 is assigned to 'i'
   52 |     i++;
      |     ^~~
source/algos/mp.c:54:9: note: 'i' is >= 'm'
   54 |     if (i >= m) {
      |         ^
source/algos/mp.c:54:5: note: Taking true branch
   54 |     if (i >= m) {
      |     ^
source/algos/mp.c:56:9: note: Assigned value is garbage or undefined
   56 |       i = mpNext[i];
      |         ^ ~~~~~~~~~
source/algos/rf.c:101:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  101 |     memset(tlength, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/rf.c:101:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  101 |     memset(tlength, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/rf.c:102:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  102 |     memset(tsuffix, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/rf.c:102:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  102 |     memset(tsuffix, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/rf.c:103:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  103 |     memset(tterminal, 0, size * sizeof(unsigned char));
      |     ^~~~~~
source/algos/rf.c:103:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  103 |     memset(tterminal, 0, size * sizeof(unsigned char));
      |     ^~~~~~
source/algos/sbndm-bmh.c:55:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
   55 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:55:3: note: Value stored to 's' is never read
   55 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:130:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
  130 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:130:3: note: Value stored to 's' is never read
  130 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:51:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
   51 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:51:3: note: Value stored to 's' is never read
   51 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:122:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
  122 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:122:3: note: Value stored to 's' is never read
  122 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sebom.c:58:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sebom.c:34:7: note: Assuming 'm' is >= 2
   34 |   if (m < 2)
      |       ^~~~~
source/algos/sebom.c:34:3: note: Taking false branch
   34 |   if (m < 2)
      |   ^
source/algos/sebom.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/sebom.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/sebom.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/sebom.c:46:5: note: Loop condition is false. Execution continues on line 51
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/sebom.c:51:3: note: Loop condition is false. Execution continues on line 54
   51 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/sebom.c:55:8: note: The value 2147483647 is assigned to 'i'
   55 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/sebom.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/sebom.c:58:17: note: Array access results in an undefined pointer dereference
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sfbom.c:54:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   54 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sfbom.c:38:7: note: Assuming the condition is false
   38 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/sfbom.c:38:3: note: Taking false branch
   38 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/sfbom.c:43:17: note: Assuming the condition is false
   43 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/sfbom.c:43:5: note: Loop condition is false. Execution continues on line 47
   43 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/sfbom.c:47:3: note: Loop condition is false. Execution continues on line 50
   47 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/sfbom.c:51:8: note: Value assigned to 'i'
   51 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/sfbom.c:51:15: note: Assuming 'i' is > 0
   51 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/sfbom.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/sfbom.c:54:17: note: Array access results in an undefined pointer dereference
   54 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/simdkr.c:46:7: warning: variable 'count' set but not used [clang-diagnostic-unused-but-set-variable]
   46 |   int count = 0;
      |       ^
source/algos/ssef.c:76:3: warning: Value stored to 'count' is never read [clang-analyzer-deadcode.DeadStores]
   76 |   count = 15;
      |   ^       ~~
source/algos/ssef.c:76:3: note: Value stored to 'count' is never read
   76 |   count = 15;
      |   ^       ~~
source/algos/tbm.c:64:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   64 |         if (bmGs[j] == m)
      |                     ^
source/algos/tbm.c:75:3: note: Calling 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:58:15: note: Assuming 'i' is >= 'm'
   58 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/tbm.c:58:3: note: Loop condition is false. Execution continues on line 60
   58 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/tbm.c:60:3: note: The value 0 is assigned to 'j'
   60 |   j = 0;
      |   ^~~~~
source/algos/tbm.c:61:19: note: Assuming 'i' is >= 0
   61 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/tbm.c:61:3: note: Loop condition is true.  Entering loop body
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:62:9: note: Assuming the condition is false
   62 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/tbm.c:62:5: note: Taking false branch
   62 |     if (suff[i] == i + 1)
      |     ^
source/algos/tbm.c:61:3: note: Loop condition is true.  Entering loop body
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:62:9: note: Assuming the condition is true
   62 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/tbm.c:62:5: note: Taking true branch
   62 |     if (suff[i] == i + 1)
      |     ^
source/algos/tbm.c:63:7: note: Loop condition is true.  Entering loop body
   63 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/tbm.c:64:21: note: The left operand of '==' is a garbage value
   64 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/tbm.c:93:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   93 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/tbm.c:75:3: note: Calling 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:58:15: note: Assuming 'i' is >= 'm'
   58 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/tbm.c:58:3: note: Loop condition is false. Execution continues on line 60
   58 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/tbm.c:61:19: note: Assuming 'i' is < 0
   61 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/tbm.c:61:3: note: Loop condition is false. Execution continues on line 66
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:66:15: note: Assuming the condition is false
   66 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/tbm.c:66:3: note: Loop condition is false. Execution continues on line 66
   66 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/tbm.c:68:1: note: Returning without writing to '*bmGs'
   68 | }
      | ^
source/algos/tbm.c:75:3: note: Returning from 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:77:3: note: Assuming 'pre_time' is null
   77 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/tbm.c:77:3: note: Taking false branch
   77 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/tbm.c:84:10: note: Assuming the condition is true
   84 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/tbm.c:84:3: note: Loop condition is true.  Entering loop body
   84 |   while (j <= n - m) {
      |   ^
source/algos/tbm.c:86:12: note: 'i' is < 0
   86 |     while (i >= 0 && x[i] == y[i + j]) {
      |            ^
source/algos/tbm.c:86:19: note: Left side of '&&' is false
   86 |     while (i >= 0 && x[i] == y[i + j]) {
      |                   ^
source/algos/tbm.c:91:9: note: 'i' is < 0
   91 |     if (i < 0) {
      |         ^
source/algos/tbm.c:91:5: note: Taking true branch
   91 |     if (i < 0) {
      |     ^
source/algos/tbm.c:93:13: note: Assigned value is garbage or undefined
   93 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/trf.c:130:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  130 |     memset(tlength, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:130:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  130 |     memset(tlength, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:131:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  131 |     memset(tposition, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:131:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  131 |     memset(tposition, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:132:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  132 |     memset(tsuffix, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:132:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  132 |     memset(tsuffix, 0, size * sizeof(int));
      |     ^~~~~~
source/algos/trf.c:133:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  133 |     memset(tterminal, 0, size * sizeof(unsigned char));
      |     ^~~~~~
source/algos/trf.c:133:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  133 |     memset(tterminal, 0, size * sizeof(unsigned char));
      |     ^~~~~~
source/algos/trf.c:142:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
  142 |   i = 0;
      |   ^   ~
source/algos/trf.c:142:3: note: Value stored to 'i' is never read
  142 |   i = 0;
      |   ^   ~
source/algos/ww.c:71:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   71 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ww.c:71:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   71 |     memset(tlength, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ww.c:72:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   72 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ww.c:72:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   72 |     memset(tsuffix, 0, 3 * m * sizeof(int));
      |     ^~~~~~
source/algos/ww.c:73:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   73 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/ww.c:73:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
   73 |     memset(tterminal, 0, 3 * m * sizeof(unsigned char));
      |     ^~~~~~
source/algos/zt.c:58:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   58 |         if (bmGs[j] == m)
      |                     ^
source/algos/zt.c:82:3: note: Calling 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:52:15: note: Assuming 'i' is >= 'm'
   52 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/zt.c:52:3: note: Loop condition is false. Execution continues on line 54
   52 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/zt.c:54:3: note: The value 0 is assigned to 'j'
   54 |   j = 0;
      |   ^~~~~
source/algos/zt.c:55:19: note: Assuming 'i' is >= 0
   55 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/zt.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:56:9: note: Assuming the condition is false
   56 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/zt.c:56:5: note: Taking false branch
   56 |     if (suff[i] == i + 1)
      |     ^
source/algos/zt.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:56:9: note: Assuming the condition is true
   56 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/zt.c:56:5: note: Taking true branch
   56 |     if (suff[i] == i + 1)
      |     ^
source/algos/zt.c:57:7: note: Loop condition is true.  Entering loop body
   57 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/zt.c:58:21: note: The left operand of '==' is a garbage value
   58 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/zt.c:97:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/zt.c:82:3: note: Calling 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:52:15: note: Assuming 'i' is >= 'm'
   52 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/zt.c:52:3: note: Loop condition is false. Execution continues on line 54
   52 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/zt.c:55:19: note: Assuming 'i' is < 0
   55 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/zt.c:55:3: note: Loop condition is false. Execution continues on line 60
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:60:15: note: Assuming the condition is false
   60 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/zt.c:60:3: note: Loop condition is false. Execution continues on line 60
   60 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/zt.c:62:1: note: Returning without writing to '*bmGs'
   62 | }
      | ^
source/algos/zt.c:82:3: note: Returning from 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:83:15: note: 'i' is >= 'm'
   83 |   for (i = 0; i < m; i++)
      |               ^
source/algos/zt.c:83:3: note: Loop condition is false. Execution continues on line 85
   83 |   for (i = 0; i < m; i++)
      |   ^
source/algos/zt.c:85:3: note: Assuming 'pre_time' is null
   85 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/zt.c:85:3: note: Taking false branch
   85 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/zt.c:91:10: note: Assuming the condition is true
   91 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/zt.c:91:3: note: Loop condition is true.  Entering loop body
   91 |   while (j <= n - m) {
      |   ^
source/algos/zt.c:93:12: note: 'i' is < 0
   93 |     while (i >= 0 && x[i] == y[i + j])
      |            ^
source/algos/zt.c:93:19: note: Left side of '&&' is false
   93 |     while (i >= 0 && x[i] == y[i + j])
      |                   ^
source/algos/zt.c:95:9: note: 'i' is < 0
   95 |     if (i < 0) {
      |         ^
source/algos/zt.c:95:5: note: Taking true branch
   95 |     if (i < 0) {
      |     ^
source/algos/zt.c:97:9: note: Assigned value is garbage or undefined
   97 |       j += bmGs[0];
      |         ^  ~~~~~~~
