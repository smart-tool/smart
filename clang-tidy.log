source/algos/ag.c:63:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   63 |         if (bmGs[j] == m)
      |                     ^
source/algos/ag.c:75:3: note: Calling 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/ag.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/ag.c:59:3: note: The value 0 is assigned to 'j'
   59 |   j = 0;
      |   ^~~~~
source/algos/ag.c:60:19: note: Assuming 'i' is >= 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/ag.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:61:9: note: Assuming the condition is false
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/ag.c:61:5: note: Taking false branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/ag.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:61:9: note: Assuming the condition is true
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/ag.c:61:5: note: Taking true branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/ag.c:62:7: note: Loop condition is true.  Entering loop body
   62 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/ag.c:63:21: note: The left operand of '==' is a garbage value
   63 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/ag.c:112:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  112 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/ag.c:75:3: note: Calling 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/ag.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/ag.c:60:19: note: Assuming 'i' is < 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/ag.c:60:3: note: Loop condition is false. Execution continues on line 65
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/ag.c:65:15: note: Assuming the condition is false
   65 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/ag.c:65:3: note: Loop condition is false. Execution continues on line 65
   65 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/ag.c:67:1: note: Returning without writing to '*bmGs'
   67 | }
      | ^
source/algos/ag.c:75:3: note: Returning from 'preBmGsAG'
   75 |   preBmGsAG(x, m, bmGs, suff);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ag.c:79:3: note: Assuming 'pre_time' is null
   79 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/ag.c:79:3: note: Taking false branch
   79 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/ag.c:85:10: note: Assuming the condition is true
   85 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/ag.c:85:3: note: Loop condition is true.  Entering loop body
   85 |   while (j <= n - m) {
      |   ^
source/algos/ag.c:87:12: note: 'i' is < 0
   87 |     while (i >= 0) {
      |            ^
source/algos/ag.c:87:5: note: Loop condition is false. Execution continues on line 109
   87 |     while (i >= 0) {
      |     ^
source/algos/ag.c:109:9: note: 'i' is < 0
  109 |     if (i < 0) {
      |         ^
source/algos/ag.c:109:5: note: Taking true branch
  109 |     if (i < 0) {
      |     ^
source/algos/ag.c:112:13: note: Assigned value is garbage or undefined
  112 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/akc.c:305:14: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  305 |       len[p] = skip[j];
      |              ^
source/algos/akc.c:381:7: note: Assuming 'm' is <= M_CUTOFF
  381 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/akc.c:381:3: note: Taking false branch
  381 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:404:3: note: Assuming 'pre_time' is null
  404 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/akc.c:404:3: note: Taking false branch
  404 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/akc.c:412:10: note: Assuming the condition is true
  412 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/akc.c:412:3: note: Loop condition is true.  Entering loop body
  412 |   while (j <= n - m) {
      |   ^
source/algos/akc.c:416:5: note: Loop condition is true.  Entering loop body
  416 |     while (i >= 0) {
      |     ^
source/algos/akc.c:417:11: note: 'k' is not equal to 0
  417 |       if (k == 0) {
      |           ^
source/algos/akc.c:417:7: note: Taking false branch
  417 |       if (k == 0) {
      |       ^
source/algos/akc.c:425:11: note: Assuming the condition is false
  425 |       if (x[i] == y[i + j]) {
      |           ^~~~~~~~~~~~~~~~
source/algos/akc.c:425:7: note: Taking false branch
  425 |       if (x[i] == y[i + j]) {
      |       ^
source/algos/akc.c:429:9: note:  Execution continues on line 431
  429 |         break;
      |         ^
source/algos/akc.c:431:9: note: 'i' is >= 0
  431 |     if (i < 0) {
      |         ^
source/algos/akc.c:431:5: note: Taking false branch
  431 |     if (i < 0) {
      |     ^
source/algos/akc.c:437:19: note: '?' condition is false
  437 |       skip[ell] = MAX(0, k - 1);
      |                   ^
source/algos/akc.c:29:20: note: expanded from macro 'MAX'
   29 | #define MAX(a, b) ((a) > (b) ? (a) : (b))
      |                    ^
source/algos/akc.c:441:7: note: Taking true branch
  441 |       if (i == m - 1) {
      |       ^
source/algos/akc.c:449:7: note: Calling 'validateShift'
  449 |       validateShift(m, clink, slink, ell, skip);
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/akc.c:281:7: note: 'm' is <= M_CUTOFF
  281 |   if (m > M_CUTOFF) {
      |       ^
source/algos/akc.c:281:3: note: Taking false branch
  281 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:290:7: note: Assuming the condition is true
  290 |   if (skip[ell] < m) {
      |       ^~~~~~~~~~~~~
source/algos/akc.c:290:3: note: Taking true branch
  290 |   if (skip[ell] < m) {
      |   ^
source/algos/akc.c:295:9: note: Assuming the condition is false
  295 |     if (skip[ell] + k >= m)
      |         ^~~~~~~~~~~~~~~~~~
source/algos/akc.c:295:5: note: Taking false branch
  295 |     if (skip[ell] + k >= m)
      |     ^
source/algos/akc.c:299:9: note: Assuming the condition is false
  299 |     if (skip[ell] + k >= m)
      |         ^~~~~~~~~~~~~~~~~~
source/algos/akc.c:299:5: note: Taking false branch
  299 |     if (skip[ell] + k >= m)
      |     ^
source/algos/akc.c:302:5: note: Loop condition is true.  Entering loop body
  302 |     while (skip[ell] + k < m) {
      |     ^
source/algos/akc.c:303:7: note: The value 3 is assigned to 'j'
  303 |       j = (j + z - 1) % z;
      |       ^~~~~~~~~~~~~~~~~~~
source/algos/akc.c:305:14: note: Assigned value is garbage or undefined
  305 |       len[p] = skip[j];
      |              ^ ~~~~~~~
source/algos/akc.c:438:23: warning: The result of the '' expression is undefined [clang-analyzer-core.UndefinedBinaryOperatorResult]
  438 |       ell = (ell + 1) % M;
      |             ~~~~~~~~~~^~~
source/algos/akc.c:381:7: note: Assuming 'm' is <= M_CUTOFF
  381 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/akc.c:381:3: note: Taking false branch
  381 |   if (m > M_CUTOFF) {
      |   ^
source/algos/akc.c:404:3: note: Assuming 'pre_time' is null
  404 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/akc.c:404:3: note: Taking false branch
  404 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/akc.c:412:10: note: Assuming the condition is true
  412 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/akc.c:412:3: note: Loop condition is true.  Entering loop body
  412 |   while (j <= n - m) {
      |   ^
source/algos/akc.c:416:12: note: Assuming 'i' is >= 0
  416 |     while (i >= 0) {
      |            ^~~~~~
source/algos/akc.c:416:5: note: Loop condition is true.  Entering loop body
  416 |     while (i >= 0) {
      |     ^
source/algos/akc.c:417:11: note: 'k' is not equal to 0
  417 |       if (k == 0) {
      |           ^
source/algos/akc.c:417:7: note: Taking false branch
  417 |       if (k == 0) {
      |       ^
source/algos/akc.c:425:11: note: Assuming the condition is false
  425 |       if (x[i] == y[i + j]) {
      |           ^~~~~~~~~~~~~~~~
source/algos/akc.c:425:7: note: Taking false branch
  425 |       if (x[i] == y[i + j]) {
      |       ^
source/algos/akc.c:429:9: note:  Execution continues on line 431
  429 |         break;
      |         ^
source/algos/akc.c:431:9: note: 'i' is >= 0
  431 |     if (i < 0) {
      |         ^
source/algos/akc.c:431:5: note: Taking false branch
  431 |     if (i < 0) {
      |     ^
source/algos/akc.c:437:19: note: '?' condition is false
  437 |       skip[ell] = MAX(0, k - 1);
      |                   ^
source/algos/akc.c:29:20: note: expanded from macro 'MAX'
   29 | #define MAX(a, b) ((a) > (b) ? (a) : (b))
      |                    ^
source/algos/akc.c:438:23: note: The result of the '' expression is undefined
  438 |       ell = (ell + 1) % M;
      |             ~~~~~~~~~~^~~
source/algos/askip.c:72:14: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   72 |   cell->next = z[node];
      |              ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:42:4: note: expanded from macro 'FIRSTBIT'
   42 |   ((x)&MSK1616                                                                 \
      |    ^
source/algos/askip.c:108:9: note: Assuming the condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^~~~~~~~~~~
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^~~~~~~~~~~
source/algos/askip.c:108:9: note: '?' condition is false
  108 |   ell = LOG2(m);
      |         ^
source/algos/include/log2.h:45:23: note: expanded from macro 'LOG2'
   45 | #define LOG2(x) (31 - FIRSTBIT(x))
      |                       ^
source/algos/include/log2.h:44:11: note: expanded from macro 'FIRSTBIT'
   44 |        : ((x)&MSK0808 ? 16 + leftbit[(x) >> 8] : 24 + leftbit[x]))
      |           ^
source/algos/askip.c:109:7: note: Assuming 'ell' is < 1
  109 |   if (ell < 1)
      |       ^~~~~~~
source/algos/askip.c:109:3: note: Taking true branch
  109 |   if (ell < 1)
      |   ^
source/algos/askip.c:114:7: note: Assuming 'size' is <= S_CUTOFF
  114 |   if (size > S_CUTOFF) {
      |       ^~~~~~~~~~~~~~~
source/algos/askip.c:114:3: note: Taking false branch
  114 |   if (size > S_CUTOFF) {
      |   ^
source/algos/askip.c:133:10: note: Calling 'addNode'
  133 |   node = addNode(automaton, art, node, x[0]);
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:79:3: note: The value 2 is assigned to 'childNode'
   79 |   childNode = automaton->nodeCounter++;
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:82:7: note: 'suffixNode' is equal to 'art'
   82 |   if (suffixNode == art)
      |       ^~~~~~~~~~
source/algos/askip.c:82:3: note: Taking true branch
   82 |   if (suffixNode == art)
      |   ^
source/algos/askip.c:90:3: note: Returning the value 2 (loaded from 'childNode')
   90 |   return (childNode);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:133:10: note: Returning from 'addNode'
  133 |   node = addNode(automaton, art, node, x[0]);
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:133:3: note: The value 2 is assigned to 'node'
  133 |   node = addNode(automaton, art, node, x[0]);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/askip.c:135:3: note: Loop condition is false. Execution continues on line 137
  135 |   for (i = 1; i < ell; ++i)
      |   ^
source/algos/askip.c:138:11: note: Passing the value 2 via 2nd parameter 'node'
  138 |   setZ(z, node, pos);
      |           ^~~~
source/algos/askip.c:138:3: note: Calling 'setZ'
  138 |   setZ(z, node, pos);
      |   ^~~~~~~~~~~~~~~~~~
source/algos/askip.c:72:14: note: Assigned value is garbage or undefined
   72 |   cell->next = z[node];
      |              ^ ~~~~~~~
source/algos/bm.c:63:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   63 |         if (bmGs[j] == m)
      |                     ^
source/algos/bm.c:74:3: note: Calling 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/bm.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/bm.c:59:3: note: The value 0 is assigned to 'j'
   59 |   j = 0;
      |   ^~~~~
source/algos/bm.c:60:19: note: Assuming 'i' is >= 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/bm.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:61:9: note: Assuming the condition is false
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/bm.c:61:5: note: Taking false branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/bm.c:60:3: note: Loop condition is true.  Entering loop body
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:61:9: note: Assuming the condition is true
   61 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/bm.c:61:5: note: Taking true branch
   61 |     if (suff[i] == i + 1)
      |     ^
source/algos/bm.c:62:7: note: Loop condition is true.  Entering loop body
   62 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/bm.c:63:21: note: The left operand of '==' is a garbage value
   63 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/bm.c:87:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   87 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/bm.c:74:3: note: Calling 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:57:15: note: Assuming 'i' is >= 'm'
   57 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/bm.c:57:3: note: Loop condition is false. Execution continues on line 59
   57 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/bm.c:60:19: note: Assuming 'i' is < 0
   60 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/bm.c:60:3: note: Loop condition is false. Execution continues on line 65
   60 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/bm.c:65:15: note: Assuming the condition is false
   65 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/bm.c:65:3: note: Loop condition is false. Execution continues on line 65
   65 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/bm.c:67:1: note: Returning without writing to '*bmGs'
   67 | }
      | ^
source/algos/bm.c:74:3: note: Returning from 'preBmGs'
   74 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/bm.c:76:3: note: Assuming 'pre_time' is null
   76 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/bm.c:76:3: note: Taking false branch
   76 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/bm.c:82:10: note: Assuming the condition is true
   82 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/bm.c:82:3: note: Loop condition is true.  Entering loop body
   82 |   while (j <= n - m) {
      |   ^
source/algos/bm.c:83:21: note: 'i' is < 0
   83 |     for (i = m - 1; i >= 0 && x[i] == y[i + j]; --i)
      |                     ^
source/algos/bm.c:83:28: note: Left side of '&&' is false
   83 |     for (i = m - 1; i >= 0 && x[i] == y[i + j]; --i)
      |                            ^
source/algos/bm.c:85:9: note: 'i' is < 0
   85 |     if (i < 0) {
      |         ^
source/algos/bm.c:85:5: note: Taking true branch
   85 |     if (i < 0) {
      |     ^
source/algos/bm.c:87:9: note: Assigned value is garbage or undefined
   87 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/bom2.c:58:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/bom2.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/bom2.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/bom2.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/bom2.c:46:5: note: Loop condition is false. Execution continues on line 51
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/bom2.c:51:3: note: Loop condition is false. Execution continues on line 54
   51 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/bom2.c:55:8: note: Value assigned to 'i'
   55 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/bom2.c:55:15: note: Assuming 'i' is > 0
   55 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/bom2.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/bom2.c:58:17: note: Array access results in an undefined pointer dereference
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/colussi.c:59:21: warning: The left operand of '==' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
   59 |     if (hmax[i + 1] == m)
      |                     ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking true branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is < 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:19: note: Assuming 'i' is >= 0
   58 |   for (i = m - 1; i >= 0; --i) {
      |                   ^~~~~~
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:21: note: The left operand of '==' is a garbage value due to array index out of bounds
   59 |     if (hmax[i + 1] == m)
      |         ~~~~~~~~~~~ ^
source/algos/colussi.c:96:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is true
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is true.  Entering loop body
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking false branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:5: note: Taking false branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/colussi.c:61:9: note: Assuming the condition is true
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/colussi.c:61:5: note: Taking true branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:71:5: note: Taking true branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is false. Execution continues on line 80
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:80:3: note: Loop condition is true.  Entering loop body
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:80:3: note: Loop condition is false. Execution continues on line 82
source/algos/colussi.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/colussi.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is false. Execution continues on line 95
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:95:3: note: Loop condition is true.  Entering loop body
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:96:13: note: Assigned value is garbage or undefined
   96 |     next[i] = nhd0[m - rmin[h[i]]];
      |             ^ ~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:97:11: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^
source/algos/colussi.c:108:8: note: Calling 'preColussi'
  108 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/colussi.c:35:12: note: Assuming the condition is false
   35 |     while (x[i] == x[i - k])
      |            ^~~~~~~~~~~~~~~~
source/algos/colussi.c:35:5: note: Loop condition is false. Execution continues on line 37
   35 |     while (x[i] == x[i - k])
      |     ^
source/algos/colussi.c:39:5: note: Loop condition is false. Execution continues on line 43
   39 |     while (hmax[q - k] + k < i) {
      |     ^
source/algos/colussi.c:44:5: note: Taking true branch
   44 |     if (k == i + 1)
      |     ^
source/algos/colussi.c:46:12: note: Assuming 'k' is > 'm'
   46 |   } while (k <= m);
      |            ^~~~~~
source/algos/colussi.c:34:3: note: Loop condition is false.  Exiting loop
   34 |   do {
      |   ^
source/algos/colussi.c:51:15: note: Assuming 'i' is >= 1
   51 |   for (i = m; i >= 1; --i)
      |               ^~~~~~
source/algos/colussi.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:52:5: note: Taking false branch
   52 |     if (hmax[i] < m)
      |     ^
source/algos/colussi.c:51:3: note: Loop condition is false. Execution continues on line 57
   51 |   for (i = m; i >= 1; --i)
      |   ^
source/algos/colussi.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:59:5: note: Taking true branch
   59 |     if (hmax[i + 1] == m)
      |     ^
source/algos/colussi.c:61:9: note: Assuming the condition is false
   61 |     if (kmin[i] == 0)
      |         ^~~~~~~~~~~~
source/algos/colussi.c:61:5: note: Taking false branch
   61 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:58:3: note: Loop condition is false. Execution continues on line 68
   58 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/colussi.c:70:3: note: Loop condition is true.  Entering loop body
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:71:5: note: Taking false branch
   71 |     if (kmin[i] == 0)
      |     ^
source/algos/colussi.c:70:3: note: Loop condition is false. Execution continues on line 75
   70 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is true.  Entering loop body
   78 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:78:3: note: Loop condition is false. Execution continues on line 80
source/algos/colussi.c:80:3: note: Loop condition is false. Execution continues on line 82
   80 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:86:3: note: Loop condition is true.  Entering loop body
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:88:9: note: Assuming the condition is false
   88 |     if (kmin[i] > 0)
      |         ^~~~~~~~~~~
source/algos/colussi.c:88:5: note: Taking false branch
   88 |     if (kmin[i] > 0)
      |     ^
source/algos/colussi.c:86:3: note: Loop condition is false. Execution continues on line 93
   86 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is true.  Entering loop body
   93 |   for (i = 0; i <= nd; ++i)
      |   ^
source/algos/colussi.c:93:3: note: Loop condition is false. Execution continues on line 95
source/algos/colussi.c:95:3: note: Loop condition is false. Execution continues on line 97
   95 |   for (i = nd + 1; i < m; ++i)
      |   ^
source/algos/colussi.c:97:11: note: Assigned value is garbage or undefined
   97 |   next[m] = nhd0[m - rmin[h[m - 1]]];
      |           ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/dfdm.c:70:32: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   70 |         ell = getLength(state) + 1;
      |                                ^
source/algos/dfdm.c:40:7: note: Assuming 'm' is <= M_CUTOFF
   40 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/dfdm.c:40:3: note: Taking false branch
   40 |   if (m > M_CUTOFF) {
      |   ^
source/algos/dfdm.c:53:3: note: Calling 'buildSimpleSuffixAutomaton'
   53 |   buildSimpleSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/include/AUTOMATON.h:164:15: note: Assuming 'i' is >= 'm'
  164 |   for (i = 0; i < m; ++i) {
      |               ^~~~~
source/algos/include/AUTOMATON.h:164:3: note: Loop condition is false. Execution continues on line 194
  164 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/include/AUTOMATON.h:195:3: note: Loop condition is false. Execution continues on line 195
  195 |   while (last != init) {
      |   ^
source/algos/include/AUTOMATON.h:199:1: note: Returning without writing to '*tlength'
  199 | }
      | ^
source/algos/dfdm.c:53:3: note: Returning from 'buildSimpleSuffixAutomaton'
   53 |   buildSimpleSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/dfdm.c:54:3: note: The value 0 is assigned to 'init'
   54 |   init = 0;
      |   ^~~~~~~~
source/algos/dfdm.c:55:3: note: Assuming 'pre_time' is null
   55 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/dfdm.c:55:3: note: Taking false branch
   55 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/dfdm.c:61:3: note: The value 0 is assigned to 'state'
   61 |   state = init;
      |   ^~~~~~~~~~~~
source/algos/dfdm.c:62:15: note: Assuming 'j' is < 'n'
   62 |   for (j = 0; j < n; ++j) {
      |               ^~~~~
source/algos/dfdm.c:62:3: note: Loop condition is true.  Entering loop body
   62 |   for (j = 0; j < n; ++j) {
      |   ^
source/algos/dfdm.c:63:9: note: Assuming the condition is false
   63 |     if (getTarget(state, y[j]) != UNDEFINED) {
      |         ^
source/algos/include/AUTOMATON.h:22:25: note: expanded from macro 'getTarget'
   22 | #define getTarget(p, c) ttrans[(p)*SIGMA + (c)]
      |                         ^
source/algos/dfdm.c:63:5: note: Taking false branch
   63 |     if (getTarget(state, y[j]) != UNDEFINED) {
      |     ^
source/algos/dfdm.c:67:14: note: 'state' is equal to 'init'
   67 |       while (state != init && getTarget(state, y[j]) == UNDEFINED)
      |              ^~~~~
source/algos/dfdm.c:67:28: note: Left side of '&&' is false
   67 |       while (state != init && getTarget(state, y[j]) == UNDEFINED)
      |                            ^
source/algos/dfdm.c:69:11: note: Assuming the condition is true
   69 |       if (getTarget(state, y[j]) != UNDEFINED) {
      |           ^
source/algos/include/AUTOMATON.h:22:25: note: expanded from macro 'getTarget'
   22 | #define getTarget(p, c) ttrans[(p)*SIGMA + (c)]
      |                         ^
source/algos/dfdm.c:69:7: note: Taking true branch
   69 |       if (getTarget(state, y[j]) != UNDEFINED) {
      |       ^
source/algos/dfdm.c:70:32: note: The left operand of '+' is a garbage value
   70 |         ell = getLength(state) + 1;
      |                                ^
source/algos/ebom.c:61:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   61 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/ebom.c:40:7: note: Assuming 'm' is >= 2
   40 |   if (m < 2)
      |       ^~~~~
source/algos/ebom.c:40:3: note: Taking false branch
   40 |   if (m < 2)
      |   ^
source/algos/ebom.c:46:7: note: Assuming the condition is false
   46 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/ebom.c:46:3: note: Taking false branch
   46 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/ebom.c:51:17: note: Assuming the condition is false
   51 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/ebom.c:51:5: note: Loop condition is false. Execution continues on line 54
   51 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/ebom.c:54:3: note: Loop condition is false. Execution continues on line 57
   54 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/ebom.c:58:8: note: The value 2147483647 is assigned to 'i'
   58 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/ebom.c:58:3: note: Loop condition is true.  Entering loop body
   58 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/ebom.c:61:17: note: Array access results in an undefined pointer dereference
   61 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/epsm.c:256:39: warning: Potential memory leak [clang-analyzer-unix.Malloc]
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |                                       ^
source/algos/epsm.c:356:7: note: Assuming 'patlen' is >= 2
  356 |   if (patlen < 2)
      |       ^~~~~~~~~~
source/algos/epsm.c:356:3: note: Taking false branch
  356 |   if (patlen < 2)
      |   ^
source/algos/epsm.c:358:7: note: Assuming 'patlen' is not equal to 2
  358 |   if (patlen == 2)
      |       ^~~~~~~~~~~
source/algos/epsm.c:358:3: note: Taking false branch
  358 |   if (patlen == 2)
      |   ^
source/algos/epsm.c:360:7: note: Assuming 'patlen' is not equal to 3
  360 |   if (patlen == 3)
      |       ^~~~~~~~~~~
source/algos/epsm.c:360:3: note: Taking false branch
  360 |   if (patlen == 3)
      |   ^
source/algos/epsm.c:362:7: note: Assuming 'patlen' is not equal to 4
  362 |   if (patlen == 4)
      |       ^~~~~~~~~~~
source/algos/epsm.c:362:3: note: Taking false branch
  362 |   if (patlen == 4)
      |   ^
source/algos/epsm.c:364:7: note: Assuming 'patlen' is >= 16
  364 |   if (patlen >= 16)
      |       ^~~~~~~~~~~~
source/algos/epsm.c:364:3: note: Taking true branch
  364 |   if (patlen >= 16)
      |   ^
source/algos/epsm.c:365:12: note: Calling 'search16'
  365 |     return search16(pattern, patlen, x, textlen);
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:256:15: note: Assuming the condition is true
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |               ^~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:256:3: note: Loop condition is true.  Entering loop body
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |   ^
source/algos/epsm.c:262:9: note: Assuming the condition is true
  262 |     if (flist[filter] == 0) {
      |         ^~~~~~~~~~~~~~~~~~
source/algos/epsm.c:262:5: note: Taking true branch
  262 |     if (flist[filter] == 0) {
      |     ^
source/algos/epsm.c:263:31: note: Memory is allocated
  263 |       flist[filter] = (LIST *)malloc(sizeof(LIST));
      |                               ^~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:264:11: note: Assuming the condition is true
  264 |       if (flist[filter]) {
      |           ^~~~~~~~~~~~~
source/algos/epsm.c:264:7: note: Taking true branch
  264 |       if (flist[filter]) {
      |       ^
source/algos/epsm.c:256:15: note: Assuming the condition is true
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |               ^~~~~~~~~~~~~~~~~~~~~~
source/algos/epsm.c:256:3: note: Loop condition is true.  Entering loop body
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |   ^
source/algos/epsm.c:262:9: note: Assuming the condition is true
  262 |     if (flist[filter] == 0) {
      |         ^~~~~~~~~~~~~~~~~~
source/algos/epsm.c:262:5: note: Taking true branch
  262 |     if (flist[filter] == 0) {
      |     ^
source/algos/epsm.c:264:11: note: Assuming the condition is false
  264 |       if (flist[filter]) {
      |           ^~~~~~~~~~~~~
source/algos/epsm.c:264:7: note: Taking false branch
  264 |       if (flist[filter]) {
      |       ^
source/algos/epsm.c:256:39: note: Potential memory leak
  256 |   for (i = 1; (int)i < tmppatlen - 7; i++) {
      |                                       ^
source/algos/fbom.c:56:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   56 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/fbom.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/fbom.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/fbom.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/fbom.c:46:5: note: Loop condition is false. Execution continues on line 49
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/fbom.c:49:3: note: Loop condition is false. Execution continues on line 52
   49 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/fbom.c:53:8: note: Value assigned to 'i'
   53 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/fbom.c:53:15: note: Assuming 'i' is > 0
   53 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/fbom.c:53:3: note: Loop condition is true.  Entering loop body
   53 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/fbom.c:56:17: note: Array access results in an undefined pointer dereference
   56 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/fdm.c:69:32: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   69 |         ell = getLength(state) + 1;
      |                                ^
source/algos/fdm.c:39:7: note: Assuming 'm' is <= M_CUTOFF
   39 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/fdm.c:39:3: note: Taking false branch
   39 |   if (m > M_CUTOFF) {
      |   ^
source/algos/fdm.c:52:3: note: Calling 'buildSimpleSuffixAutomaton'
   52 |   buildSimpleSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/include/AUTOMATON.h:164:15: note: Assuming 'i' is >= 'm'
  164 |   for (i = 0; i < m; ++i) {
      |               ^~~~~
source/algos/include/AUTOMATON.h:164:3: note: Loop condition is false. Execution continues on line 194
  164 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/include/AUTOMATON.h:195:3: note: Loop condition is false. Execution continues on line 195
  195 |   while (last != init) {
      |   ^
source/algos/include/AUTOMATON.h:199:1: note: Returning without writing to '*tlength'
  199 | }
      | ^
source/algos/fdm.c:52:3: note: Returning from 'buildSimpleSuffixAutomaton'
   52 |   buildSimpleSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/fdm.c:53:3: note: The value 0 is assigned to 'init'
   53 |   init = 0;
      |   ^~~~~~~~
source/algos/fdm.c:56:3: note: Assuming 'pre_time' is null
   56 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/fdm.c:56:3: note: Taking false branch
   56 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/fdm.c:60:3: note: The value 0 is assigned to 'state'
   60 |   state = init;
      |   ^~~~~~~~~~~~
source/algos/fdm.c:61:15: note: Assuming 'j' is < 'n'
   61 |   for (j = 0; j < n; ++j) {
      |               ^~~~~
source/algos/fdm.c:61:3: note: Loop condition is true.  Entering loop body
   61 |   for (j = 0; j < n; ++j) {
      |   ^
source/algos/fdm.c:62:9: note: Assuming the condition is false
   62 |     if (getTarget(state, y[j]) != UNDEFINED) {
      |         ^
source/algos/include/AUTOMATON.h:22:25: note: expanded from macro 'getTarget'
   22 | #define getTarget(p, c) ttrans[(p)*SIGMA + (c)]
      |                         ^
source/algos/fdm.c:62:5: note: Taking false branch
   62 |     if (getTarget(state, y[j]) != UNDEFINED) {
      |     ^
source/algos/fdm.c:66:14: note: 'state' is equal to 'init'
   66 |       while (state != init && getTarget(state, y[j]) == UNDEFINED)
      |              ^~~~~
source/algos/fdm.c:66:28: note: Left side of '&&' is false
   66 |       while (state != init && getTarget(state, y[j]) == UNDEFINED)
      |                            ^
source/algos/fdm.c:68:11: note: Assuming the condition is true
   68 |       if (getTarget(state, y[j]) != UNDEFINED) {
      |           ^
source/algos/include/AUTOMATON.h:22:25: note: expanded from macro 'getTarget'
   22 | #define getTarget(p, c) ttrans[(p)*SIGMA + (c)]
      |                         ^
source/algos/fdm.c:68:7: note: Taking true branch
   68 |       if (getTarget(state, y[j]) != UNDEFINED) {
      |       ^
source/algos/fdm.c:69:32: note: The left operand of '+' is a garbage value
   69 |         ell = getLength(state) + 1;
      |                                ^
source/algos/ffs.c:41:7: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   41 |     i = temx[last];
      |       ^
source/algos/ffs.c:66:3: note: Calling 'Forward_Suffix_Function'
   66 |   Forward_Suffix_Function(x, m, gs, SIGMA);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/ffs.c:34:15: note: Assuming 'i' is >= 'm'
   34 |   for (i = 0; i < m; i++)
      |               ^~~~~
source/algos/ffs.c:34:3: note: Loop condition is false. Execution continues on line 37
   34 |   for (i = 0; i < m; i++)
      |   ^
source/algos/ffs.c:37:15: note: 'i' is >= 'm'
   37 |   for (i = 0; i < m; i++)
      |               ^
source/algos/ffs.c:37:3: note: Loop condition is false. Execution continues on line 39
   37 |   for (i = 0; i < m; i++)
      |   ^
source/algos/ffs.c:39:24: note: Assuming 'suffix_len' is <= 'm'
   39 |   for (suffix_len = 0; suffix_len <= m; suffix_len++) {
      |                        ^~~~~~~~~~~~~~~
source/algos/ffs.c:39:3: note: Loop condition is true.  Entering loop body
   39 |   for (suffix_len = 0; suffix_len <= m; suffix_len++) {
      |   ^
source/algos/ffs.c:40:5: note: The value -1 is assigned to 'last'
   40 |     last = m - 1;
      |     ^~~~~~~~~~~~
source/algos/ffs.c:41:7: note: Assigned value is garbage or undefined
   41 |     i = temx[last];
      |       ^ ~~~~~~~~~~
source/algos/fs-w6.c:108:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
  108 |   s3 = q;
      |   ^    ~
source/algos/fs-w6.c:108:3: note: Value stored to 's3' is never read
  108 |   s3 = q;
      |   ^    ~
source/algos/fs-w6.c:110:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
  110 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w6.c:110:3: note: Value stored to 's5' is never read
  110 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:104:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
  104 |   s3 = q;
      |   ^    ~
source/algos/fs-w8.c:104:3: note: Value stored to 's3' is never read
  104 |   s3 = q;
      |   ^    ~
source/algos/fs-w8.c:106:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
  106 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:106:3: note: Value stored to 's5' is never read
  106 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:108:3: warning: Value stored to 's7' is never read [clang-analyzer-deadcode.DeadStores]
  108 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fs-w8.c:108:3: note: Value stored to 's7' is never read
  108 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:89:3: warning: Value stored to 's3' is never read [clang-analyzer-deadcode.DeadStores]
   89 |   s3 = q;
      |   ^    ~
source/algos/fsbndm-w8.c:89:3: note: Value stored to 's3' is never read
   89 |   s3 = q;
      |   ^    ~
source/algos/fsbndm-w8.c:91:3: warning: Value stored to 's5' is never read [clang-analyzer-deadcode.DeadStores]
   91 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:91:3: note: Value stored to 's5' is never read
   91 |   s5 = 2 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:93:3: warning: Value stored to 's7' is never read [clang-analyzer-deadcode.DeadStores]
   93 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/fsbndm-w8.c:93:3: note: Value stored to 's7' is never read
   93 |   s7 = 3 * q;
      |   ^    ~~~~~
source/algos/gg.c:60:23: warning: The left operand of '==' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
   60 |       if (hmax[i + 1] == m)
      |                       ^
source/algos/gg.c:109:17: note: Assuming the condition is false
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:109:3: note: Loop condition is false. Execution continues on line 111
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:111:7: note: Assuming the condition is false
  111 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:111:3: note: Taking false branch
  111 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:127:8: note: Calling 'preColussi'
  127 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:36:14: note: Assuming the condition is false
   36 |       while (x[i] == x[i - k])
      |              ^~~~~~~~~~~~~~~~
source/algos/gg.c:36:7: note: Loop condition is false. Execution continues on line 38
   36 |       while (x[i] == x[i - k])
      |       ^
source/algos/gg.c:40:7: note: Loop condition is false. Execution continues on line 44
   40 |       while (hmax[q - k] + k < i) {
      |       ^
source/algos/gg.c:45:7: note: Taking true branch
   45 |       if (k == i + 1)
      |       ^
source/algos/gg.c:47:13: note: Assuming 'k' is > 'm'
   47 |    } while (k <= m);
      |             ^~~~~~
source/algos/gg.c:35:4: note: Loop condition is false.  Exiting loop
   35 |    do {
      |    ^
source/algos/gg.c:52:16: note: 'i' is < 1
   52 |    for (i = m; i >= 1; --i)
      |                ^
source/algos/gg.c:52:4: note: Loop condition is false. Execution continues on line 58
   52 |    for (i = m; i >= 1; --i)
      |    ^
source/algos/gg.c:59:20: note: Assuming 'i' is >= 0
   59 |    for (i = m - 1; i >= 0; --i) {
      |                    ^~~~~~
source/algos/gg.c:59:4: note: Loop condition is true.  Entering loop body
   59 |    for (i = m - 1; i >= 0; --i) {
      |    ^
source/algos/gg.c:60:23: note: The left operand of '==' is a garbage value due to array index out of bounds
   60 |       if (hmax[i + 1] == m)
      |           ~~~~~~~~~~~ ^
source/algos/gg.c:97:15: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |       next[i] = nhd0[m - rmin[h[i]]];
      |               ^
source/algos/gg.c:109:17: note: Assuming the condition is true
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:109:3: note: Loop condition is true.  Entering loop body
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:109:17: note: Assuming the condition is false
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:109:3: note: Loop condition is false. Execution continues on line 111
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:111:7: note: Assuming the condition is false
  111 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:111:3: note: Taking false branch
  111 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:127:8: note: Calling 'preColussi'
  127 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:36:14: note: Assuming the condition is true
   36 |       while (x[i] == x[i - k])
      |              ^~~~~~~~~~~~~~~~
source/algos/gg.c:36:7: note: Loop condition is true.  Entering loop body
   36 |       while (x[i] == x[i - k])
      |       ^
source/algos/gg.c:36:14: note: Assuming the condition is false
   36 |       while (x[i] == x[i - k])
      |              ^~~~~~~~~~~~~~~~
source/algos/gg.c:36:7: note: Loop condition is false. Execution continues on line 38
   36 |       while (x[i] == x[i - k])
      |       ^
source/algos/gg.c:40:7: note: Loop condition is false. Execution continues on line 44
   40 |       while (hmax[q - k] + k < i) {
      |       ^
source/algos/gg.c:45:7: note: Taking false branch
   45 |       if (k == i + 1)
      |       ^
source/algos/gg.c:47:13: note: Assuming 'k' is > 'm'
   47 |    } while (k <= m);
      |             ^~~~~~
source/algos/gg.c:35:4: note: Loop condition is false.  Exiting loop
   35 |    do {
      |    ^
source/algos/gg.c:52:16: note: Assuming 'i' is >= 1
   52 |    for (i = m; i >= 1; --i)
      |                ^~~~~~
source/algos/gg.c:52:4: note: Loop condition is true.  Entering loop body
   52 |    for (i = m; i >= 1; --i)
      |    ^
source/algos/gg.c:53:7: note: Taking false branch
   53 |       if (hmax[i] < m)
      |       ^
source/algos/gg.c:52:4: note: Loop condition is false. Execution continues on line 58
   52 |    for (i = m; i >= 1; --i)
      |    ^
source/algos/gg.c:59:4: note: Loop condition is true.  Entering loop body
   59 |    for (i = m - 1; i >= 0; --i) {
      |    ^
source/algos/gg.c:60:7: note: Taking false branch
   60 |       if (hmax[i + 1] == m)
      |       ^
source/algos/gg.c:62:11: note: Assuming the condition is true
   62 |       if (kmin[i] == 0)
      |           ^~~~~~~~~~~~
source/algos/gg.c:62:7: note: Taking true branch
   62 |       if (kmin[i] == 0)
      |       ^
source/algos/gg.c:59:4: note: Loop condition is false. Execution continues on line 69
   59 |    for (i = m - 1; i >= 0; --i) {
      |    ^
source/algos/gg.c:71:4: note: Loop condition is true.  Entering loop body
   71 |    for (i = 0; i < m; ++i)
      |    ^
source/algos/gg.c:72:7: note: Taking true branch
   72 |       if (kmin[i] == 0)
      |       ^
source/algos/gg.c:71:4: note: Loop condition is false. Execution continues on line 76
   71 |    for (i = 0; i < m; ++i)
      |    ^
source/algos/gg.c:79:4: note: Loop condition is false. Execution continues on line 81
   79 |    for (i = 0; i <= nd; ++i)
      |    ^
source/algos/gg.c:81:4: note: Loop condition is true.  Entering loop body
   81 |    for (i = nd + 1; i < m; ++i)
      |    ^
source/algos/gg.c:81:4: note: Loop condition is false. Execution continues on line 83
source/algos/gg.c:87:4: note: Loop condition is true.  Entering loop body
   87 |    for (i = 0; i < m; ++i) {
      |    ^
source/algos/gg.c:89:7: note: Taking false branch
   89 |       if (kmin[i] > 0)
      |       ^
source/algos/gg.c:87:4: note: Loop condition is false. Execution continues on line 94
   87 |    for (i = 0; i < m; ++i) {
      |    ^
source/algos/gg.c:94:4: note: Loop condition is false. Execution continues on line 96
   94 |    for (i = 0; i <= nd; ++i)
      |    ^
source/algos/gg.c:96:4: note: Loop condition is true.  Entering loop body
   96 |    for (i = nd + 1; i < m; ++i)
      |    ^
source/algos/gg.c:97:15: note: Assigned value is garbage or undefined
   97 |       next[i] = nhd0[m - rmin[h[i]]];
      |               ^ ~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:98:12: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   98 |    next[m] = nhd0[m - rmin[h[m - 1]]];
      |            ^
source/algos/gg.c:109:17: note: Assuming the condition is true
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:109:3: note: Loop condition is true.  Entering loop body
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:109:17: note: Assuming the condition is false
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |                 ^~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:109:3: note: Loop condition is false. Execution continues on line 111
  109 |   for (ell = 0; x[ell] == x[ell + 1]; ell++)
      |   ^
source/algos/gg.c:111:7: note: Assuming the condition is false
  111 |   if (ell == m - 1) {
      |       ^~~~~~~~~~~~
source/algos/gg.c:111:3: note: Taking false branch
  111 |   if (ell == m - 1) {
      |   ^
source/algos/gg.c:127:8: note: Calling 'preColussi'
  127 |   nd = preColussi(x, m, h, next, shift);
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:36:14: note: Assuming the condition is true
   36 |       while (x[i] == x[i - k])
      |              ^~~~~~~~~~~~~~~~
source/algos/gg.c:36:7: note: Loop condition is true.  Entering loop body
   36 |       while (x[i] == x[i - k])
      |       ^
source/algos/gg.c:36:14: note: Assuming the condition is false
   36 |       while (x[i] == x[i - k])
      |              ^~~~~~~~~~~~~~~~
source/algos/gg.c:36:7: note: Loop condition is false. Execution continues on line 38
   36 |       while (x[i] == x[i - k])
      |       ^
source/algos/gg.c:40:7: note: Loop condition is false. Execution continues on line 44
   40 |       while (hmax[q - k] + k < i) {
      |       ^
source/algos/gg.c:45:7: note: Taking false branch
   45 |       if (k == i + 1)
      |       ^
source/algos/gg.c:47:13: note: Assuming 'k' is > 'm'
   47 |    } while (k <= m);
      |             ^~~~~~
source/algos/gg.c:35:4: note: Loop condition is false.  Exiting loop
   35 |    do {
      |    ^
source/algos/gg.c:52:16: note: Assuming 'i' is >= 1
   52 |    for (i = m; i >= 1; --i)
      |                ^~~~~~
source/algos/gg.c:52:4: note: Loop condition is true.  Entering loop body
   52 |    for (i = m; i >= 1; --i)
      |    ^
source/algos/gg.c:53:7: note: Taking false branch
   53 |       if (hmax[i] < m)
      |       ^
source/algos/gg.c:52:4: note: Loop condition is false. Execution continues on line 58
   52 |    for (i = m; i >= 1; --i)
      |    ^
source/algos/gg.c:59:4: note: Loop condition is true.  Entering loop body
   59 |    for (i = m - 1; i >= 0; --i) {
      |    ^
source/algos/gg.c:60:7: note: Taking false branch
   60 |       if (hmax[i + 1] == m)
      |       ^
source/algos/gg.c:62:11: note: Assuming the condition is false
   62 |       if (kmin[i] == 0)
      |           ^~~~~~~~~~~~
source/algos/gg.c:62:7: note: Taking false branch
   62 |       if (kmin[i] == 0)
      |       ^
source/algos/gg.c:59:4: note: Loop condition is false. Execution continues on line 69
   59 |    for (i = m - 1; i >= 0; --i) {
      |    ^
source/algos/gg.c:71:4: note: Loop condition is true.  Entering loop body
   71 |    for (i = 0; i < m; ++i)
      |    ^
source/algos/gg.c:72:7: note: Taking false branch
   72 |       if (kmin[i] == 0)
      |       ^
source/algos/gg.c:71:4: note: Loop condition is false. Execution continues on line 76
   71 |    for (i = 0; i < m; ++i)
      |    ^
source/algos/gg.c:79:4: note: Loop condition is true.  Entering loop body
   79 |    for (i = 0; i <= nd; ++i)
      |    ^
source/algos/gg.c:79:4: note: Loop condition is false. Execution continues on line 81
source/algos/gg.c:81:4: note: Loop condition is false. Execution continues on line 83
   81 |    for (i = nd + 1; i < m; ++i)
      |    ^
source/algos/gg.c:87:4: note: Loop condition is true.  Entering loop body
   87 |    for (i = 0; i < m; ++i) {
      |    ^
source/algos/gg.c:89:11: note: Assuming the condition is false
   89 |       if (kmin[i] > 0)
      |           ^~~~~~~~~~~
source/algos/gg.c:89:7: note: Taking false branch
   89 |       if (kmin[i] > 0)
      |       ^
source/algos/gg.c:87:4: note: Loop condition is false. Execution continues on line 94
   87 |    for (i = 0; i < m; ++i) {
      |    ^
source/algos/gg.c:94:4: note: Loop condition is true.  Entering loop body
   94 |    for (i = 0; i <= nd; ++i)
      |    ^
source/algos/gg.c:94:4: note: Loop condition is false. Execution continues on line 96
source/algos/gg.c:96:4: note: Loop condition is false. Execution continues on line 98
   96 |    for (i = nd + 1; i < m; ++i)
      |    ^
source/algos/gg.c:98:12: note: Assigned value is garbage or undefined
   98 |    next[m] = nhd0[m - rmin[h[m - 1]]];
      |            ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/gg.c:148:11: warning: Value stored to 'heavy' is never read [clang-analyzer-deadcode.DeadStores]
  148 |           heavy = 0;
      |           ^       ~
source/algos/gg.c:148:11: note: Value stored to 'heavy' is never read
  148 |           heavy = 0;
      |           ^       ~
source/algos/ildm1.c:45:27: warning: Result of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [clang-analyzer-unix.MallocSizeof]
   45 |     xR = (unsigned char *)malloc(sizeof(char) * (m + 1));
      |           ~~~~~~~~~~~~~~~ ^~~~~~ ~~~~~~~~~~~~
source/algos/ildm1.c:45:27: note: Result of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char'
   45 |     xR = (unsigned char *)malloc(sizeof(char) * (m + 1));
      |           ~~~~~~~~~~~~~~~ ^~~~~~ ~~~~~~~~~~~~
source/algos/include/AUTOMATON.h:168:31: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  168 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/dfdm.c:40:7: note: Assuming 'm' is <= M_CUTOFF
   40 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/dfdm.c:40:3: note: Taking false branch
   40 |   if (m > M_CUTOFF) {
      |   ^
source/algos/dfdm.c:53:3: note: Calling 'buildSimpleSuffixAutomaton'
   53 |   buildSimpleSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/include/AUTOMATON.h:159:3: note: The value 0 is assigned to 'init'
  159 |   init = 0;
      |   ^~~~~~~~
source/algos/include/AUTOMATON.h:163:3: note: The value 0 is assigned to 'last'
  163 |   last = init;
      |   ^~~~~~~~~~~
source/algos/include/AUTOMATON.h:164:15: note: Assuming 'i' is < 'm'
  164 |   for (i = 0; i < m; ++i) {
      |               ^~~~~
source/algos/include/AUTOMATON.h:164:3: note: Loop condition is true.  Entering loop body
  164 |   for (i = 0; i < m; ++i) {
      |   ^
source/algos/include/AUTOMATON.h:166:5: note: The value 0 is assigned to 'p'
  166 |     p = last;
      |     ^~~~~~~~
source/algos/include/AUTOMATON.h:168:31: note: The left operand of '+' is a garbage value
  168 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/include/AUTOMATON.h:23:41: note: expanded from macro 'setLength'
   23 | #define setLength(p, q) tlength[(p)] = (q)
      |                                         ^
source/algos/kmp.c:63:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   63 |       i = kmpNext[i];
      |         ^ ~~~~~~~~~~
source/algos/kmp.c:49:3: note: Calling 'preKmp'
   49 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmp.c:32:10: note: Assuming 'i' is >= 'm'
   32 |   while (i < m) {
      |          ^~~~~
source/algos/kmp.c:32:3: note: Loop condition is false. Execution continues on line 32
   32 |   while (i < m) {
      |   ^
source/algos/kmp.c:49:3: note: Returning from 'preKmp'
   49 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmp.c:50:3: note: Assuming 'pre_time' is null
   50 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/kmp.c:50:3: note: Taking false branch
   50 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/kmp.c:56:10: note: Assuming 'j' is < 'n'
   56 |   while (j < n) {
      |          ^~~~~
source/algos/kmp.c:56:3: note: Loop condition is true.  Entering loop body
   56 |   while (j < n) {
      |   ^
source/algos/kmp.c:57:12: note: Left side of '&&' is true
   57 |     while (i > -1 && x[i] != y[j])
      |            ^
source/algos/kmp.c:57:22: note: Assuming the condition is false
   57 |     while (i > -1 && x[i] != y[j])
      |                      ^~~~~~~~~~~~
source/algos/kmp.c:57:5: note: Loop condition is false. Execution continues on line 59
   57 |     while (i > -1 && x[i] != y[j])
      |     ^
source/algos/kmp.c:59:5: note: The value 1 is assigned to 'i'
   59 |     i++;
      |     ^~~
source/algos/kmp.c:61:9: note: 'i' is >= 'm'
   61 |     if (i >= m) {
      |         ^
source/algos/kmp.c:61:5: note: Taking true branch
   61 |     if (i >= m) {
      |     ^
source/algos/kmp.c:63:9: note: Assigned value is garbage or undefined
   63 |       i = kmpNext[i];
      |         ^ ~~~~~~~~~~
source/algos/kmpskip.c:90:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
   90 |   i = j = -1;
      |   ^   ~~~~~~
source/algos/kmpskip.c:90:3: note: Value stored to 'i' is never read
   90 |   i = j = -1;
      |   ^   ~~~~~~
source/algos/kmpskip.c:138:24: warning: The right operand of '-' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
  138 |         kmpStart += (k - mpNext[k]);
      |                        ^ ~~~~~~~~~
source/algos/kmpskip.c:72:3: note: Calling 'preMp'
   72 |   preMp((char*)x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:51:10: note: Assuming 'i' is >= 'm'
   51 |   while (i < m) {
      |          ^~~~~
source/algos/kmpskip.c:51:3: note: Loop condition is false. Execution continues on line 51
   51 |   while (i < m) {
      |   ^
source/algos/kmpskip.c:72:3: note: Returning from 'preMp'
   72 |   preMp((char*)x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:73:3: note: Calling 'preKmp'
   73 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:33:7: note: Assigning -1
   33 |   j = kmpNext[0] = -1;
      |       ^~~~~~~~~~~~~~~
source/algos/kmpskip.c:34:10: note: 'i' is >= 'm'
   34 |   while (i < m) {
      |          ^
source/algos/kmpskip.c:34:3: note: Loop condition is false. Execution continues on line 34
   34 |   while (i < m) {
      |   ^
source/algos/kmpskip.c:73:3: note: Returning from 'preKmp'
   73 |   preKmp(x, m, kmpNext);
      |   ^~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:79:15: note: 'i' is >= 'm'
   79 |   for (i = 1; i < m; ++i) {
      |               ^
source/algos/kmpskip.c:79:3: note: Loop condition is false. Execution continues on line 83
   79 |   for (i = 1; i < m; ++i) {
      |   ^
source/algos/kmpskip.c:83:3: note: Assuming 'pre_time' is null
   83 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/kmpskip.c:83:3: note: Taking false branch
   83 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/kmpskip.c:93:12: note: Assuming 'j' is < 'n'
   93 |   } while (j < n && z[y[j]] < 0);
      |            ^~~~~
source/algos/kmpskip.c:93:12: note: Left side of '&&' is true
source/algos/kmpskip.c:91:3: note: Loop condition is false.  Exiting loop
   91 |   do {
      |   ^
source/algos/kmpskip.c:94:7: note: Assuming 'j' is < 'n'
   94 |   if (j >= n) {
      |       ^~~~~~
source/algos/kmpskip.c:94:3: note: Taking false branch
   94 |   if (j >= n) {
      |   ^
source/algos/kmpskip.c:100:10: note: Assuming the condition is true
  100 |   while (start <= n - m) {
      |          ^~~~~~~~~~~~~~
source/algos/kmpskip.c:100:3: note: Loop condition is true.  Entering loop body
  100 |   while (start <= n - m) {
      |   ^
source/algos/kmpskip.c:101:9: note: Assuming 'start' is > 'wall'
  101 |     if (start > wall)
      |         ^~~~~~~~~~~~
source/algos/kmpskip.c:101:5: note: Taking true branch
  101 |     if (start > wall)
      |     ^
source/algos/kmpskip.c:103:9: note: Calling 'attempt'
  103 |     k = attempt((char*)y, (char*)x, m, start, wall);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:60:3: note: The value 0 is assigned to 'k'
   60 |   k = wall - start;
      |   ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:61:10: note: 'k' is >= 'm'
   61 |   while (k < m && x[k] == y[k + start])
      |          ^
source/algos/kmpskip.c:61:16: note: Left side of '&&' is false
   61 |   while (k < m && x[k] == y[k + start])
      |                ^
source/algos/kmpskip.c:63:3: note: Returning zero (loaded from 'k')
   63 |   return (k);
      |   ^~~~~~~~~~
source/algos/kmpskip.c:103:9: note: Returning from 'attempt'
  103 |     k = attempt((char*)y, (char*)x, m, start, wall);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:103:5: note: The value 0 is assigned to 'k'
  103 |     k = attempt((char*)y, (char*)x, m, start, wall);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/kmpskip.c:105:9: note: Assuming 'k' is not equal to 'm'
  105 |     if (k == m) {
      |         ^~~~~~
source/algos/kmpskip.c:105:5: note: Taking false branch
  105 |     if (k == m) {
      |     ^
source/algos/kmpskip.c:110:9: note: Assuming 'i' is >= 0
  110 |     if (i < 0) {
      |         ^~~~~
source/algos/kmpskip.c:110:5: note: Taking false branch
  110 |     if (i < 0) {
      |     ^
source/algos/kmpskip.c:121:5: note: The value -1 is assigned to 'k'
  121 |     k = kmpNext[k];
      |     ^~~~~~~~~~~~~~
source/algos/kmpskip.c:123:12: note: Assuming 'start' is >= 'kmpStart'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |            ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:123:12: note: Left side of '||' is false
source/algos/kmpskip.c:123:33: note: Assuming 'kmpStart' is < 'start'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |                                 ^~~~~~~~~~~~~~~~
source/algos/kmpskip.c:123:33: note: Left side of '&&' is true
source/algos/kmpskip.c:123:53: note: Assuming 'start' is < 'wall'
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |                                                     ^~~~~~~~~~~~
source/algos/kmpskip.c:123:5: note: Loop condition is true.  Entering loop body
  123 |     while (start < kmpStart || (kmpStart < start && start < wall)) {
      |     ^
source/algos/kmpskip.c:124:11: note: 'start' is >= 'kmpStart'
  124 |       if (start < kmpStart) {
      |           ^~~~~
source/algos/kmpskip.c:124:7: note: Taking false branch
  124 |       if (start < kmpStart) {
      |       ^
source/algos/kmpskip.c:138:24: note: The right operand of '-' is a garbage value due to array index out of bounds
  138 |         kmpStart += (k - mpNext[k]);
      |                        ^ ~~~~~~~~~
source/algos/mp.c:56:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   56 |       i = mpNext[i];
      |         ^ ~~~~~~~~~
source/algos/mp.c:42:3: note: Calling 'preMp'
   42 |   preMp(x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/mp.c:30:10: note: Assuming 'i' is >= 'm'
   30 |   while (i < m) {
      |          ^~~~~
source/algos/mp.c:30:3: note: Loop condition is false. Execution continues on line 30
   30 |   while (i < m) {
      |   ^
source/algos/mp.c:42:3: note: Returning from 'preMp'
   42 |   preMp(x, m, mpNext);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/mp.c:43:3: note: Assuming 'pre_time' is null
   43 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/mp.c:43:3: note: Taking false branch
   43 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/mp.c:49:10: note: Assuming 'j' is < 'n'
   49 |   while (j < n) {
      |          ^~~~~
source/algos/mp.c:49:3: note: Loop condition is true.  Entering loop body
   49 |   while (j < n) {
      |   ^
source/algos/mp.c:50:12: note: Left side of '&&' is true
   50 |     while (i > -1 && x[i] != y[j])
      |            ^
source/algos/mp.c:50:22: note: Assuming the condition is false
   50 |     while (i > -1 && x[i] != y[j])
      |                      ^~~~~~~~~~~~
source/algos/mp.c:50:5: note: Loop condition is false. Execution continues on line 52
   50 |     while (i > -1 && x[i] != y[j])
      |     ^
source/algos/mp.c:52:5: note: The value 1 is assigned to 'i'
   52 |     i++;
      |     ^~~
source/algos/mp.c:54:9: note: 'i' is >= 'm'
   54 |     if (i >= m) {
      |         ^
source/algos/mp.c:54:5: note: Taking true branch
   54 |     if (i >= m) {
      |     ^
source/algos/mp.c:56:9: note: Assigned value is garbage or undefined
   56 |       i = mpNext[i];
      |         ^ ~~~~~~~~~
source/algos/rf.c:42:31: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   42 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/rf.c:91:7: note: Assuming 'm' is <= M_CUTOFF
   91 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/rf.c:91:3: note: Taking false branch
   91 |   if (m > M_CUTOFF) {
      |   ^
source/algos/rf.c:104:3: note: Calling 'buildSuffixAutomaton'
  104 |   buildSuffixAutomaton(x, m, ttrans, tlength, tsuffix, tterminal);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/rf.c:33:3: note: The value 0 is assigned to 'init'
   33 |   init = 0;
      |   ^~~~~~~~
source/algos/rf.c:37:3: note: The value 0 is assigned to 'last'
   37 |   last = init;
      |   ^~~~~~~~~~~
source/algos/rf.c:38:19: note: Assuming 'i' is >= 0
   38 |   for (i = m - 1; i >= 0; --i) {
      |                   ^~~~~~
source/algos/rf.c:38:3: note: Loop condition is true.  Entering loop body
   38 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/rf.c:40:5: note: The value 0 is assigned to 'p'
   40 |     p = last;
      |     ^~~~~~~~
source/algos/rf.c:42:31: note: The left operand of '+' is a garbage value
   42 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/include/AUTOMATON.h:23:41: note: expanded from macro 'setLength'
   23 | #define setLength(p, q) tlength[(p)] = (q)
      |                                         ^
source/algos/sbndm-bmh.c:55:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
   55 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:55:3: note: Value stored to 's' is never read
   55 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:130:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
  130 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm-bmh.c:130:3: note: Value stored to 's' is never read
  130 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:51:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
   51 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:51:3: note: Value stored to 's' is never read
   51 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:122:3: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
  122 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sbndm.c:122:3: note: Value stored to 's' is never read
  122 |   s = (unsigned int)(~0) << (WORD - m);
      |   ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source/algos/sebom.c:58:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sebom.c:34:7: note: Assuming 'm' is >= 2
   34 |   if (m < 2)
      |       ^~~~~
source/algos/sebom.c:34:3: note: Taking false branch
   34 |   if (m < 2)
      |   ^
source/algos/sebom.c:41:7: note: Assuming the condition is false
   41 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/sebom.c:41:3: note: Taking false branch
   41 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/sebom.c:46:17: note: Assuming the condition is false
   46 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/sebom.c:46:5: note: Loop condition is false. Execution continues on line 51
   46 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/sebom.c:51:3: note: Loop condition is false. Execution continues on line 54
   51 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/sebom.c:55:8: note: The value 2147483647 is assigned to 'i'
   55 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/sebom.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/sebom.c:58:17: note: Array access results in an undefined pointer dereference
   58 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sfbom.c:54:17: warning: Array access results in an undefined pointer dereference [clang-analyzer-core.NullDereference]
   54 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/sfbom.c:38:7: note: Assuming the condition is false
   38 |   if (m + 2 > M_CUTOFF) {
      |       ^~~~~~~~~~~~~~~~
source/algos/sfbom.c:38:3: note: Taking false branch
   38 |   if (m + 2 > M_CUTOFF) {
      |   ^
source/algos/sfbom.c:43:17: note: Assuming the condition is false
   43 |     for (i = 0; i <= m + 1; i++)
      |                 ^~~~~~~~~~
source/algos/sfbom.c:43:5: note: Loop condition is false. Execution continues on line 47
   43 |     for (i = 0; i <= m + 1; i++)
      |     ^
source/algos/sfbom.c:47:3: note: Loop condition is false. Execution continues on line 50
   47 |   for (i = 0; i <= m + 1; i++)
      |   ^
source/algos/sfbom.c:51:8: note: Value assigned to 'i'
   51 |   for (i = m; i > 0; --i) {
      |        ^~~~~
source/algos/sfbom.c:51:15: note: Assuming 'i' is > 0
   51 |   for (i = m; i > 0; --i) {
      |               ^~~~~
source/algos/sfbom.c:51:3: note: Loop condition is true.  Entering loop body
   51 |   for (i = m; i > 0; --i) {
      |   ^
source/algos/sfbom.c:54:17: note: Array access results in an undefined pointer dereference
   54 |     trans[i][c] = iMinus1;
      |     ~~~~~~~~~~~~^~~~~~~~~
source/algos/ssef.c:76:3: warning: Value stored to 'count' is never read [clang-analyzer-deadcode.DeadStores]
   76 |   count = 15;
      |   ^       ~~
source/algos/ssef.c:76:3: note: Value stored to 'count' is never read
   76 |   count = 15;
      |   ^       ~~
source/algos/tbm.c:64:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   64 |         if (bmGs[j] == m)
      |                     ^
source/algos/tbm.c:75:3: note: Calling 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:58:15: note: Assuming 'i' is >= 'm'
   58 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/tbm.c:58:3: note: Loop condition is false. Execution continues on line 60
   58 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/tbm.c:60:3: note: The value 0 is assigned to 'j'
   60 |   j = 0;
      |   ^~~~~
source/algos/tbm.c:61:19: note: Assuming 'i' is >= 0
   61 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/tbm.c:61:3: note: Loop condition is true.  Entering loop body
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:62:9: note: Assuming the condition is false
   62 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/tbm.c:62:5: note: Taking false branch
   62 |     if (suff[i] == i + 1)
      |     ^
source/algos/tbm.c:61:3: note: Loop condition is true.  Entering loop body
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:62:9: note: Assuming the condition is true
   62 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/tbm.c:62:5: note: Taking true branch
   62 |     if (suff[i] == i + 1)
      |     ^
source/algos/tbm.c:63:7: note: Loop condition is true.  Entering loop body
   63 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/tbm.c:64:21: note: The left operand of '==' is a garbage value
   64 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/tbm.c:93:13: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   93 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/tbm.c:75:3: note: Calling 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:58:15: note: Assuming 'i' is >= 'm'
   58 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/tbm.c:58:3: note: Loop condition is false. Execution continues on line 60
   58 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/tbm.c:61:19: note: Assuming 'i' is < 0
   61 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/tbm.c:61:3: note: Loop condition is false. Execution continues on line 66
   61 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/tbm.c:66:15: note: Assuming the condition is false
   66 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/tbm.c:66:3: note: Loop condition is false. Execution continues on line 66
   66 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/tbm.c:68:1: note: Returning without writing to '*bmGs'
   68 | }
      | ^
source/algos/tbm.c:75:3: note: Returning from 'preBmGs'
   75 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/tbm.c:77:3: note: Assuming 'pre_time' is null
   77 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/tbm.c:77:3: note: Taking false branch
   77 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/tbm.c:84:10: note: Assuming the condition is true
   84 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/tbm.c:84:3: note: Loop condition is true.  Entering loop body
   84 |   while (j <= n - m) {
      |   ^
source/algos/tbm.c:86:12: note: 'i' is < 0
   86 |     while (i >= 0 && x[i] == y[i + j]) {
      |            ^
source/algos/tbm.c:86:19: note: Left side of '&&' is false
   86 |     while (i >= 0 && x[i] == y[i + j]) {
      |                   ^
source/algos/tbm.c:91:9: note: 'i' is < 0
   91 |     if (i < 0) {
      |         ^
source/algos/tbm.c:91:5: note: Taking true branch
   91 |     if (i < 0) {
      |     ^
source/algos/tbm.c:93:13: note: Assigned value is garbage or undefined
   93 |       shift = bmGs[0];
      |             ^ ~~~~~~~
source/algos/trf.c:56:31: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   56 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/trf.c:114:7: note: Assuming 'm' is <= M_CUTOFF
  114 |   if (m > M_CUTOFF) {
      |       ^~~~~~~~~~~~
source/algos/trf.c:114:3: note: Taking false branch
  114 |   if (m > M_CUTOFF) {
      |   ^
source/algos/trf.c:133:3: note: Calling 'buildSuffixAutomaton4TRF'
  133 |   buildSuffixAutomaton4TRF(x, m, ttrans, tlength, tposition, tsuffix, tterminal,
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  134 |                            tshift);
      |                            ~~~~~~~
source/algos/trf.c:46:3: note: 'init' initialized to 0
   46 |   const int init = 0;
      |   ^~~~~~~~~~~~~~
source/algos/trf.c:51:3: note: The value 0 is assigned to 'last'
   51 |   last = init;
      |   ^~~~~~~~~~~
source/algos/trf.c:52:19: note: Assuming 'i' is >= 0
   52 |   for (i = m - 1; i >= 0; --i) {
      |                   ^~~~~~
source/algos/trf.c:52:3: note: Loop condition is true.  Entering loop body
   52 |   for (i = m - 1; i >= 0; --i) {
      |   ^
source/algos/trf.c:54:5: note: The value 0 is assigned to 'p'
   54 |     p = last;
      |     ^~~~~~~~
source/algos/trf.c:56:31: note: The left operand of '+' is a garbage value
   56 |     setLength(q, getLength(p) + 1);
      |                               ^
source/algos/include/AUTOMATON.h:23:41: note: expanded from macro 'setLength'
   23 | #define setLength(p, q) tlength[(p)] = (q)
      |                                         ^
source/algos/trf.c:138:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
  138 |   i = 0;
      |   ^   ~
source/algos/trf.c:138:3: note: Value stored to 'i' is never read
  138 |   i = 0;
      |   ^   ~
source/algos/zt.c:58:21: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
   58 |         if (bmGs[j] == m)
      |                     ^
source/algos/zt.c:82:3: note: Calling 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:52:15: note: Assuming 'i' is >= 'm'
   52 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/zt.c:52:3: note: Loop condition is false. Execution continues on line 54
   52 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/zt.c:54:3: note: The value 0 is assigned to 'j'
   54 |   j = 0;
      |   ^~~~~
source/algos/zt.c:55:19: note: Assuming 'i' is >= 0
   55 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/zt.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:56:9: note: Assuming the condition is false
   56 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/zt.c:56:5: note: Taking false branch
   56 |     if (suff[i] == i + 1)
      |     ^
source/algos/zt.c:55:3: note: Loop condition is true.  Entering loop body
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:56:9: note: Assuming the condition is true
   56 |     if (suff[i] == i + 1)
      |         ^~~~~~~~~~~~~~~~
source/algos/zt.c:56:5: note: Taking true branch
   56 |     if (suff[i] == i + 1)
      |     ^
source/algos/zt.c:57:7: note: Loop condition is true.  Entering loop body
   57 |       for (; j < m - 1 - i; ++j)
      |       ^
source/algos/zt.c:58:21: note: The left operand of '==' is a garbage value
   58 |         if (bmGs[j] == m)
      |             ~~~~~~~ ^
source/algos/zt.c:97:9: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   97 |       j += bmGs[0];
      |         ^  ~~~~~~~
source/algos/zt.c:82:3: note: Calling 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:52:15: note: Assuming 'i' is >= 'm'
   52 |   for (i = 0; i < m; ++i)
      |               ^~~~~
source/algos/zt.c:52:3: note: Loop condition is false. Execution continues on line 54
   52 |   for (i = 0; i < m; ++i)
      |   ^
source/algos/zt.c:55:19: note: Assuming 'i' is < 0
   55 |   for (i = m - 1; i >= 0; --i)
      |                   ^~~~~~
source/algos/zt.c:55:3: note: Loop condition is false. Execution continues on line 60
   55 |   for (i = m - 1; i >= 0; --i)
      |   ^
source/algos/zt.c:60:15: note: Assuming the condition is false
   60 |   for (i = 0; i <= m - 2; ++i)
      |               ^~~~~~~~~~
source/algos/zt.c:60:3: note: Loop condition is false. Execution continues on line 60
   60 |   for (i = 0; i <= m - 2; ++i)
      |   ^
source/algos/zt.c:62:1: note: Returning without writing to '*bmGs'
   62 | }
      | ^
source/algos/zt.c:82:3: note: Returning from 'preBmGs'
   82 |   preBmGs(x, m, bmGs);
      |   ^~~~~~~~~~~~~~~~~~~
source/algos/zt.c:83:15: note: 'i' is >= 'm'
   83 |   for (i = 0; i < m; i++)
      |               ^
source/algos/zt.c:83:3: note: Loop condition is false. Execution continues on line 85
   83 |   for (i = 0; i < m; i++)
      |   ^
source/algos/zt.c:85:3: note: Assuming 'pre_time' is null
   85 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:9: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |         ^~~~~~~~
source/algos/zt.c:85:3: note: Taking false branch
   85 |   END_PREPROCESSING
      |   ^
source/algos/include/main.h:54:5: note: expanded from macro 'END_PREPROCESSING'
   54 |     if (pre_time)                                                              \
      |     ^
source/algos/zt.c:91:10: note: Assuming the condition is true
   91 |   while (j <= n - m) {
      |          ^~~~~~~~~~
source/algos/zt.c:91:3: note: Loop condition is true.  Entering loop body
   91 |   while (j <= n - m) {
      |   ^
source/algos/zt.c:93:12: note: 'i' is < 0
   93 |     while (i >= 0 && x[i] == y[i + j])
      |            ^
source/algos/zt.c:93:19: note: Left side of '&&' is false
   93 |     while (i >= 0 && x[i] == y[i + j])
      |                   ^
source/algos/zt.c:95:9: note: 'i' is < 0
   95 |     if (i < 0) {
      |         ^
source/algos/zt.c:95:5: note: Taking true branch
   95 |     if (i < 0) {
      |     ^
source/algos/zt.c:97:9: note: Assigned value is garbage or undefined
   97 |       j += bmGs[0];
      |         ^  ~~~~~~~
